t = (h0 - h)/2
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l
t
-l*bp2mm
595 * (1/2.83467)
l
w0 - (2*l)
paste( "pdfcrop --bbox '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l *bp2mm, " ",
-t *bp2mm, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
l*bp2mm
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '0 0 0 0' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.4
h = 228.6
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0,0,w0*bp2mm,h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
0, " ",
0, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
w0 = 210
h0 = 297.1
w = 152.35
h = 228.55
l = (w0 - w)/2
t = (h0 - h)/2
w0 - (2*l)
bp2mm = 2.83467
paste( "pdfcrop --margins '",
-l*bp2mm, " ",
-t*bp2mm," ",
-l*bp2mm, " ",
-t*bp2mm, "' --clip --bbox '",
0," ",0," ",w0*bp2mm," ",h0*bp2mm,
"' EvoLang11_test.pdf EvoLang11_crop.pdf",
sep = '')
library(ape)
rtree(10)
t = rtree(10)
d = matrix(rnorm(100),nrow=10)
t
plot(t)
d
d[upper.tri(d)] = d[lower.tri(d)]
diag(d) = 0
library(ecodist)
??patristic
vcov(t)
?vcov
library(lme4)
library(party)
library(sjPlot)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv")
d[d$modalityCondition=="acoustic",]
table(d$modalityCondition)
d[d$modalityCondition=="vocal",]
d[d$modalityCondition=="vocal",][1,]
d[d$modalityCondition=="vocal",][46,]
15 * 60
library(lme4)
library(party)
library(sjPlot)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv")
d$game = d$game + 1
x = table(d$dyadNumber,d$itemId)
x[,] = 0
d = d[order(d$dyadNumber,d$game,d$trial),]
d$cumNumT2 = 0
for(i in 1:nrow(d)){
if(d[i,]$turnType=="T2"){
x[d[i,]$dyadNumber, d[i,]$itemId] =
x[d[i,]$dyadNumber, d[i,]$itemId] + 1
}
d[i,]$cumNumT2 = x[d[i,]$dyadNumber, d[i,]$itemId]
}
x = table(d$dyadNumber,d$itemId)
x[,] = 0
d$cumNumTurns = 0
for(i in 1:nrow(d)){
d[i,]$cumNumTurns = x[d[i,]$dyadNumber, d[i,]$itemId]
x[d[i,]$dyadNumber, d[i,]$itemId] =
x[d[i,]$dyadNumber, d[i,]$itemId] + 1
}
d = d[d$turnType=="T1",]
d = d[!duplicated(d$trialString),]
d$turnLength.logcenter = log(d$turnLength)
meanLogTurnLength = mean(d$turnLength.logcenter)
d$turnLength.logcenter  = d$turnLength.logcenter - meanLogTurnLength
d$multi = d$turnModalityType=="multi"
d$trialTotal = d$trial + (d$game * (max(d$trial)+1))
# Convert to proportion of games played, so that estimates reflect change per game.
d$trialTotal = d$trialTotal / 16
# Center the trialTotal variable so intercept reflects after the first game
d$trialTotal = d$trialTotal - 2
# Quadratic effect
d$trialTotalQ = d$trialTotal^2
cx = ctree(turnLength~
trialTotal + trialTotalQ +
modalityCondition+condition +
multi + cumNumT2 + cumNumTurns,
data = d)
plot(cx, terminal_panel=node_barplot)
m0 = lmer(turnLength.logcenter~
trialTotal + trialTotalQ +
modalityCondition*condition*multi +
trialTotal:modalityCondition +
trialTotal:condition +
trialTotal:multi +
trialTotalQ:modalityCondition +
trialTotalQ:condition +
trialTotalQ:multi +
#cumNumT2*modalityCondition +
#cumNumT2:condition +
#cumNumT2:trialTotal +
cumNumTurns*modalityCondition*condition +
cumNumTurns:trialTotal +
(1 | dyadNumber / playerId) +
(1 + modalityCondition|itemId),
data = d)
convertEst = function(X){
exp(meanLogTurnLength+X) - exp(meanLogTurnLength)
}
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
# Plot the fixed effects
x
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F,
show.intercept = T)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
# Plot the fixed effects
x
mean(d$turnLength)
mean(d$turnLength - d$trialLength)
mean(d[d$modalityCondition=="vocal",]$turnLength - d[d$modalityCondition=="vocal",]$trialLength)
d[d$trialValue=="Ga2 Tu11 Ta8 {5 *8* 3} Ch8",]
d[d$trialValue=="Ga2 Tu11 Ta8 {5 *8* 3} Ch8",][1,]
d[d$trialValue=="Ga2 Tu11 Ta8 {5 *8* 3} Ch8",][2,]
t(t(d[d$trialValue=="Ga2 Tu11 Ta8 {5 *8* 3} Ch8",][2,]))
t(d[d$trialValue=="Ga2 Tu11 Ta8 {5 *8* 3} Ch8",][2,])
hist(d$trialLength,ylim=c(0,10000))
hist(d$trialLength,ylim=c(0,6000))
hist(log(d$trialLength))
hist(log(d$trialLength), ylim=c(6,12))
hist(log(d$trialLength), xlim=c(6,12))
hist(log(d$turnLength), xlim=c(6,12))
exp(8)
exp(9)
exp(9) - exp(8)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType & d$dyadNumber=="D10",],
col=1,barcol = 1,
xaxt='n',ylim=c(0,20),
n.label = F,
xlab='Game', ylab="T1 length (s)")
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,n.label = F,
xaxt='n')
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="T1 length (s)", las=1)
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans((trialLength/1000) - (turnLength/1000) ~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType & d$dyadNumber=="D10",],
col=1,barcol = 1,
xaxt='n',ylim=c(0,20),
n.label = F,
xlab='Game', ylab="T1 length (s)")
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,n.label = F,
xaxt='n')
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial Length - T1 length (s)", las=1)
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
d[d$dyadNumber=="D10",]$trialLength - d[d$dyadNumber=="D10",]$turnLength
plot(d[d$dyadNumber=="D10",]$trialLength - d[d$dyadNumber=="D10",]$turnLength)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans((trialLength/1000) - (turnLength/1000) ~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType & d$dyadNumber=="D10",],
col=1,barcol = 1,
xaxt='n',ylim=c(0,20),
n.label = F,
xlab='Game', ylab="T1 length (s)")
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,n.label = F,
xaxt='n')
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial Length - T1 length (s)", las=1)
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans((trialLength/1000) - (turnLength/1000) ~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType & d$dyadNumber=="D10",],
col=1,barcol = 1,
xaxt='n',ylim=c(0,20),
n.label = F,
xlab='Game', ylab="Trial Length - T1 length (s)")
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,n.label = F,
xaxt='n')
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
ylim=c(0,20),
xlab="Game",
las=1)
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
pdf(file="../../results/graphs/MatcherChoosingTime_TrialLengthMinusT1Length.pdf",width=10, height=6)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans((trialLength/1000) - (turnLength/1000) ~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType & d$dyadNumber=="D10",],
col=1,barcol = 1,
xaxt='n',ylim=c(0,20),
n.label = F,
xlab='Game', ylab="Trial Length - T1 length (s)")
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,n.label = F,
xaxt='n')
plotmeans((trialLength/1000) - (turnLength/1000)~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
ylim=c(0,20),
xlab="Game",
las=1)
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
dev.off()
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
d$game = d$game +1
#d = d[d$correct,]
plotmeans(trialLength~paste(modalityCondition,condition),
data=d[!duplicated(d$trialString),],
connect=list(1:2,3:4,5:6))
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
d$signalLength
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
legend(2.5,10,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,10,legend=c('Visual','Multimodal','Acoustic'), col=3:1,lty=1,pch=1)
}
title(main=stimType)
}
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Trial length (s)", las=1)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,10,legend=c('Visual','Multimodal','Acoustic'), col=3:1,lty=1,pch=1)
}
title(main=stimType)
}
pdf("../../results/graphs/Signal1_Efficiency.pdf", width=10, height=6)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,10),
xlab="Game",
ylab="Signal length (s)", las=1)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(signalLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,10,legend=c('Visual','Multimodal','Acoustic'), col=3:1,lty=1,pch=1)
}
title(main=stimType)
}
dev.off()
