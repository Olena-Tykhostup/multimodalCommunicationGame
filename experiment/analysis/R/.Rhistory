games_propAcousticSignals_V= x[[6]]
mx$T1.propAc = c(propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim
)[mx$trialString]
# Plot histograms
cols= c(rgb(0,1,0,0.5),rgb(1,0,0,0.5))
breaks = seq(0,1,0.05)
hist(propAcousticSignals_AuditoryStim, col=cols[1], border=cols[1], breaks=breaks)
hist(propAcousticSignals_VisualStim, add=T, col=cols[2], border = cols[2], breaks=breaks)
pdf("../../results/graphs/PropModality/PropModality_T1_2Hist.pdf")
par(mfrow=c(2,1))
hist(propAcousticSignals_AuditoryStim, col='white',  breaks=breaks, main='Auditory Stimuli', xlab='', ylab='Number of cases')
hist(propAcousticSignals_VisualStim, col='white', breaks=breaks, main="Visual Stimuli",xlab='Proportion of acoustic signals', ylab='Number of cases')
dev.off()
# Line distributions
par(mfrow=c(1,1))
audLine = density(propAcousticSignals_AuditoryStim)
visLine = density(propAcousticSignals_VisualStim)
plot(visLine, col=3, lwd=2, xlim=c(0,1))
lines(audLine, lwd=2)
legend(0.3,10, legend = c("Acoustic","Visual"),col= c(1,3), lty=1, lwd=2)
# Mirrored histogram
pdf("../../results/graphs/PropModality/PropModality_T1.pdf")
multhist(propAcousticSignals_AuditoryStim,propAcousticSignals_VisualStim,
bin.width=0.05,
col=c(2,3),
dir=c(1,-1),
main="T1",
legends = c("Auditory","Visual"),
xlab="Proportion of Acoustic signals",
ylab="Number of trials")
dev.off()
acousticDirector = d$modalityCondition=="multi" & d$role=="Director" & d$modality=="Acoustic"
visualDirector = d$modalityCondition=="multi" & d$role=="Director" & d$modality=="Visual"
x = getPropTimeAcoustic(acousticDirector ,visualDirector)
propAcousticSignals_AuditoryStim_director = x[[1]]
propAcousticSignals_VisualStim_director = x[[2]]
pdf("../../results/graphs/PropModality/PropModality_Director_2Hist.pdf")
par(mfrow=c(2,1))
hist(propAcousticSignals_AuditoryStim_director, col='red', border='black',  breaks=breaks, main='Auditory Stimuli', xlab='', ylab='Number of cases')
hist(propAcousticSignals_VisualStim_director, col='red', border='black', breaks=breaks, main="Visual Stimuli",xlab='Proportion of acoustic signals', ylab='Number of cases')
dev.off()
pdf("../../results/graphs/PropModality/PropModality_Director.pdf")
multhist(propAcousticSignals_AuditoryStim_director,
propAcousticSignals_VisualStim_director,
bin.width=0.05,
col=c(2,3),
dir=c(1,-1),
main="Director Turns",
legends = c("Auditory","Visual"),
xlab="Proportion of Acoustic signals",
ylab="Number of trials")
dev.off()
## Mirrored histogram in ggplot
library(ggplot2)
require(gridExtra)
df = data.frame(aud=c(propAcousticSignals_AuditoryStim,NA), # fill in one point to make lengths equal
vis=propAcousticSignals_VisualStim)
brks = c(-300,-200,-100,0,100,200)
binwidthx = 1/20
# Don't plot non-multimodal signals
df = df[df$aud!=0,]
df = df[df$aud!=1,]
pdf("../../results/graphs/PropModality/Director_T1_Auditory_PropModality.pdf", width=4, height=4)
g = ggplot(df, aes(aud))
gaud = g+ geom_histogram( aes(x = aud, y = ..count..), binwidth = binwidthx, fill="gray") +
scale_y_continuous(name = "Number\nof trials") +
theme(plot.title = element_text(hjust=0.5),
axis.title.y = element_text(angle=0, vjust=0.5)) +
scale_x_continuous(limits =c(-0.05,1.05), name="Signal ratio",breaks=c(0,0.5,1),labels = c("Visual\nonly","Equal length","Auditory\nonly"))
gaud
dev.off()
g = ggplot(df, aes(aud))
g1 = g+ geom_histogram( aes(x = aud, y = -..count..), binwidth = binwidthx, fill="gray") +
scale_y_continuous(name = "Number of trials",breaks=brks,labels = abs(brks), limits = c(-300,0)) +
theme(plot.title = element_text(hjust=0.5),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
scale_x_continuous(limits =c(-0.1,1.1), name="",breaks=c(0,0.5,1),labels = c("","",""))+
coord_flip() + ggtitle("Auditory Stimuli")
g2 = ggplot(df, aes(vis))
g2 = g2 +geom_histogram( aes(x = vis, y = ..count..), binwidth = binwidthx, fill="gray") +
scale_y_continuous(name = "Number of trials",breaks=brks,labels = abs(brks), limits = c(0,300)) +
scale_x_continuous(name="",breaks=c(0,0.5,1),labels = c("Visual only","Equal length","Auditory only"),limits = c(-0.1,1.1))+
theme(plot.title = element_text(hjust=0.5),
axis.title.y=element_text(angle=0,vjust = 1),
axis.text.y=element_text(angle=0,hjust = 0.5, margin = margin(r=10)),
axis.ticks.y = element_blank()) +
annotation_custom(
grob = textGrob(label = "Ratio", hjust = 0, gp = gpar(cex = 1.2)),
ymin = -90,      # Vertical position of the textGrob
ymax = -90,
xmin = 1.2,         # Note: The grobs are positioned outside the plot area
xmax = 1) +
coord_flip() + ggtitle("Visual Stimuli")
g2b <- ggplot_gtable(ggplot_build(g2))
g2b$layout$clip[g2b$layout$name == "panel"] <- "off"
pdf("../../results/graphs/PropModality/PropModality_T1_ggplot2.pdf", width=8, height=4)
grid.arrange(g1, g2b, ncol=2,widths=c(1,1.2))
dev.off()
############
# T2
acousticT2s = d$modalityCondition=="multi" & d$turnType=='T2' & d$modality=="Acoustic"
visualT2s = d$modalityCondition=="multi" & d$turnType=='T2' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT2s,visualT2s)
propAcousticSignals_AuditoryStimT2 = x[[1]]
propAcousticSignals_VisualStimT2 = x[[2]]
mx$T2.propAc = c(propAcousticSignals_AuditoryStimT2,
propAcousticSignals_VisualStimT2
)[mx$trialString]
# Mirrored histogram
pdf("../../results/graphs/PropModality/PropModality_T2.pdf")
multhist(propAcousticSignals_AuditoryStimT2,propAcousticSignals_VisualStimT2,
bin.width=0.05,
col=c(1,2),
dir=c(1,-1),
main='T2',
legends = c("Auditory","Visual"),
xlab="Proportion of Acoustic signals",
ylab="Number of trials")
dev.off()
############
# T3 and beyond for Director
acousticT3s = d$modalityCondition=="multi" &
d$turnType!='T1' & d$role=="Director" &
d$modality=="Acoustic"
visualT3s = d$modalityCondition=="multi" &
d$turnType!='T1' & d$role=="Director" &
d$modality=="Visual"
x = getPropTimeAcoustic(acousticT3s,visualT3s)
propAcousticSignals_AuditoryStimT3 = x[[1]]
propAcousticSignals_VisualStimT3 = x[[2]]
mx$T3Plus.propAc = c(propAcousticSignals_AuditoryStimT3,
propAcousticSignals_VisualStimT3
)[mx$trialString]
# Mirrored histogram
pdf("../../results/graphs/PropModality/PropModality_Director_postT1.pdf")
multhist(propAcousticSignals_AuditoryStimT3,propAcousticSignals_VisualStimT3,
bin.width=0.05,
col=c(1,2),
dir=c(1,-1),
main='T3',
legends = c("Auditory","Visual"),
xlab="Proportion of Acoustic signals",
ylab="Number of trials")
dev.off()
# T4 and beyond for Matcher
acousticT4s = d$modalityCondition=="multi" &
d$turnType!='T2' & d$role=="Director" &
d$modality=="Acoustic"
visualT4s = d$modalityCondition=="multi" &
d$turnType!='T2' & d$role=="Director" &
d$modality=="Visual"
x = getPropTimeAcoustic(acousticT4s,visualT4s)
propAcousticSignals_AuditoryStimT4 = x[[1]]
propAcousticSignals_VisualStimT4 = x[[2]]
mx$T4Plus.propAc = c(propAcousticSignals_AuditoryStimT4,
propAcousticSignals_VisualStimT4
)[mx$trialString]
# All director turns
acousticD = d$modalityCondition=="multi" &
d$role=="Director" &
d$modality=="Acoustic"
visualD = d$modalityCondition=="multi" &
d$role=="Director" &
d$modality=="Visual"
x = getPropTimeAcoustic(acousticD,visualD)
propAcousticSignals_AuditoryStimD = x[[1]]
propAcousticSignals_VisualStimD = x[[2]]
mx$Director.propAc = c(propAcousticSignals_AuditoryStimD,
propAcousticSignals_VisualStimD
)[mx$trialString]
# All matcher turns
acousticM = d$modalityCondition=="multi" &
d$role!="Director" &
d$modality=="Acoustic"
visualM = d$modalityCondition=="multi" &
d$role!="Director" &
d$modality=="Visual"
x = getPropTimeAcoustic(acousticM,visualM)
propAcousticSignals_AuditoryStimM = x[[1]]
propAcousticSignals_VisualStimM = x[[2]]
mx$Matcher.propAc = c(propAcousticSignals_AuditoryStimM,
propAcousticSignals_VisualStimM
)[mx$trialString]
### How many turns have multimodal utts?
getMultimodalUttsPerTurn <- function(turnSel){
dx = d[turnSel,]
# if there's only one signal, or only one modality used
if(nrow(dx)==1 | length(unique(dx$modality))==1){
return(list(mutli=0, total=nrow(dx)))
}
}
for(turn in unique(d$turnString)){
turnSel = d$modalityCondition=='multi' & d$turnString==turn
}
write.csv(mx,"../../data/Final_Multimodal_Trial_data.csv", row.names = F)
###############
library(lattice)
xyplot(trialLength/1000~game | dyadNumber+condition,
data=d[d$modalityCondition=="multi",],
type='a',
ylim=c(0,40),
main="Trial length in the multimodal condition")
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals_A|factor(dyads_propAcousticSignals_A), type='p')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='p')
table(d$turnNumber,d$role)
table(d$turnType,d$role)
d[d$role=='Matcher' & d$turnNumber==1,]
head(d[d$role=='Matcher' & d$turnNumber==1,])
d[d$trialString=='Visual D11 0 4',]
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors = F)
matcherResponds = tapply(d$turnType, d$trialString, function(X){
any(X %in% c("T2","T4","T6","T8",'T10'))
})
sum(matcherResponds)
dim(d)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors = F)
matcherResponds = tapply(d$turnType, d$trialString, function(X){
any(X %in% c("T2","T4","T6","T8",'T10'))
})
condition = tapply(d$condition, d$trialString, head,n=1)
modalityCondition = tapply(d$modalityCondition, d$trialString, head,n=1)
dx = data.frame(condition=condition,
modalityCondition = modalityCondition,
matcherResponds = matcherResponds)
table(dx$matcherResponds, dx$condition,dx$modalityCondition)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv",stringsAsFactors = F)
d = d[d$role=="Director" & d$turnNumber==1 & d$modalityCondition == "multi" & d$condition=='Auditory',]
multimodalSignal = tapply(d$modality, d$trialString, function(X){
length(unique(X))==2
})
d = d[d$trialString %in% names(multimodalSignal)[multimodalSignal],]
d$signalStart.R = NA
d$signalEnd.R = NA
for(ts in unique(d$trialString)){
v = d[d$trialString==ts,]$signalStart[1]
d[d$trialString==ts, ]$signalStart.R =
d[d$trialString==ts, ]$signalStart - v
d[d$trialString==ts, ]$signalEnd.R =
d[d$trialString==ts, ]$signalEnd - v
}
####
colx = c(
rgb(220,117,109,maxColorValue = 255),
rgb(117,155,252,maxColorValue = 255))
aorder = tapply(
d[d$modality=="Acoustic",]$signalStart.R,
d[d$modality=="Acoustic",]$trialString,
head, n=1)
trials = names(sort(aorder))
res = 201
cuts = seq(-0.5,1.5,length.out = res)
counts = rep(0,length.out = res)
for(i in 1:length(trials)){
ts = trials[i]
v = d[d$trialString==ts & d$modality=='Visual',][1,]
a = d[d$trialString==ts & d$modality=='Acoustic',][1,]
aL = a$signalLength / v$signalLength
aStart = (a$signalStart - v$signalStart) / v$signalLength
aEnd = aStart + aL
sel = cuts>aStart & cuts<=aEnd
counts[sel] = counts[sel] + 1
}
pdf("../../results/graphs/PropModality/TurnOverlap_Director_Multimodal_AcousticStimuli.pdf", width=5,height = 3)
par(mar=c(1,6,1,1))
barplot(counts, col=colx[2],border=colx[2],
space = 0,
ylim=c(0,300), las=1, ylab="")
text(-60,150,"Number\nofTrials",xpd=T)
rect(which(cuts==0),0,which(cuts==1),300, col='light gray', border=NA)
rect(which(cuts==0),250,which(cuts==1),300, col=colx[1], border=NA)
barplot(counts, col=colx[2],border=colx[2],
space = 0,
ylim=c(0,300), add=T, yaxt='n')
text(which(cuts==0.5),275,"Visual", col='white')
text(which(cuts==0.5),75,"Acoustic", col='white')
dev.off()
### Relative to Acoustic
aorder = tapply(
d[d$modality=="Visual",]$signalStart.R,
d[d$modality=="Visual",]$trialString,
head, n=1)
trials = names(sort(aorder))
res = 201
cuts = seq(-1,1.5,length.out = res)
counts = rep(0,length.out = res)
for(i in 1:length(trials)){
ts = trials[i]
# just switch a and v
a = d[d$trialString==ts & d$modality=='Visual',][1,]
v = d[d$trialString==ts & d$modality=='Acoustic',][1,]
aL = a$signalLength / v$signalLength
aStart = (a$signalStart - v$signalStart) / v$signalLength
aEnd = aStart + aL
sel = cuts>aStart & cuts<=aEnd
counts[sel] = counts[sel] + 1
}
pdf("../../results/graphs/PropModality/TurnOverlap_Director_Multimodal_AcousticStimuli_RelativeToAcoustic.pdf", width=5,height = 3)
par(mar=c(1,6,1,1))
ymax = 300
barplot(counts, col=colx[1],border=colx[1],
space = 0,
ylim=c(0,ymax), las=1, ylab="")
text(-60,150,"Number\nofTrials",xpd=T)
rect(which(cuts==0),0,which(cuts==1),ymax, col='light gray', border=NA)
rect(which(cuts==0),250,which(cuts==1),ymax, col=colx[2], border=NA)
barplot(counts, col=colx[1],border=colx[1],
space = 0,
ylim=c(0,ymax), add=T, yaxt='n')
text(which(cuts==0.5),275,"Acoustic", col='white')
text(which(cuts==0.5),75,"Visual", col='white')
dev.off()
########################
### For Matchers
########################
d = read.csv("../../data/FinalSignalData.csv",stringsAsFactors = F)
d = d[d$role=="Matcher" & d$modalityCondition == "multi" ,]
firstMatcher = tapply(d$turnString,d$trialString, head,n=1)
d = d[d$turnString %in% firstMatcher,]
multimodalSignal = tapply(d$modality, d$trialString, function(X){
length(unique(X))==2
})
d = d[d$trialString %in% names(multimodalSignal)[multimodalSignal],]
d$signalStart.R = NA
d$signalEnd.R = NA
for(ts in unique(d$trialString)){
v = d[d$trialString==ts,]$signalStart[1]
d[d$trialString==ts, ]$signalStart.R =
d[d$trialString==ts, ]$signalStart - v
d[d$trialString==ts, ]$signalEnd.R =
d[d$trialString==ts, ]$signalEnd - v
}
####
colx = c(
rgb(220,117,109,maxColorValue = 255),
rgb(117,155,252,maxColorValue = 255))
aorder = tapply(d[d$modality=="Acoustic",]$signalStart.R,
d[d$modality=="Acoustic",]$trialString,
function(X){
X[1]
})
trials = names(sort(aorder))
res = 201
cuts = seq(-0.5,1.5,length.out = res)
counts = rep(0,length.out = res)
for(i in 1:length(trials)){
ts = trials[i]
v = d[d$trialString==ts & d$modality=='Visual',][1,]
a = d[d$trialString==ts & d$modality=='Acoustic',][1,]
aL = a$signalLength / v$signalLength
aStart = (a$signalStart - v$signalStart) / v$signalLength
aEnd = aStart + aL
sel = cuts>aStart & cuts<=aEnd
counts[sel] = counts[sel] + 1
}
pdf("../../results/graphs/PropModality/TurnOverlap_Matcher_Multimodal_AcousticStimuli.pdf", width=5,height = 3)
ymax = 12
par(mar=c(1,6,1,1))
barplot(counts, col=colx[2],border=colx[2],
space = 0,
ylim=c(0,ymax), las=1, ylab="")
text(-60,6,"Number\nofTrials",xpd=T)
rect(which(cuts==0),0,which(cuts==1),12, col='light gray', border=NA)
rect(which(cuts==0),10,which(cuts==1),12, col=colx[1], border=NA)
barplot(counts, col=colx[2],border=colx[2],
space = 0,
ylim=c(0,ymax), add=T, yaxt='n')
text(which(cuts==0.5),11,"Visual", col='white')
text(which(cuts==0.5),4,"Acoustic", col='white')
dev.off()
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv",stringsAsFactors = F)
d_director = d[d$role=="Director" & d$turnNumber==1 & d$modalityCondition=="multi",]
tx.pre = table(d_director$turnModalityType,d_director$condition)
tx.pre[,1]/sum(tx.pre[,1])
tx.pre[,2]/sum(tx.pre[,2])
d_director = d_director[d_director$turnModalityType!='unimodal mixed',]
d_matcher = d[d$role=="Matcher",]
d_matcher = d_matcher[d_matcher$turnModalityType!='unimodal mixed',]
d_director_all = d[d$role=="Director" & d$modalityCondition=="multi" & d$turnModalityType!='unimodal mixed',]
plotMMDist = function(d, filename){
tx = table(d$turnModalityType,d$condition)
tx = tx[c(2,1,3),]
dx = data.frame(count=c(tx[,1],tx[,2]),
turnModalityType = rep(rownames(tx,2)),
condition = rep(colnames(tx),each=3))
dx$turnModalityType = relevel(factor(dx$turnModalityType),'unimodal acoustic')
dx$turnModalityType = factor(dx$turnModalityType,
levels = c("unimodal acoustic","multi",'unimodal visual'),
labels = c("Vocal only",'Multimodal','Gesture only'))
dx$condition = factor(dx$condition, labels = c("Auditory stimuli",'Visual stimuli'))
cols = 1:3
# barplot(tx, beside=T,
#         col=cols, border=NA,names.arg = c("Auditory Stimuli", "Visual Stimuli"))
# abline(h=0)
pdf(filename, width=4.5, height=4)
g = ggplot(data=dx, aes(x=condition,y=count,fill=turnModalityType)) +
geom_bar(position="dodge",stat="identity") +
theme(legend.position="top", panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_text(angle=0, vjust = 0.5))  +
labs(fill="") + ylab("Count") + xlab("") + geom_vline(xintercept = 1.5, color='white')
print(g)
dev.off()
return(dx)
}
########
plotMMDist(d_director,"../../results/graphs/PropModality/Director_T1_TurnTypes.pdf")
dx_director = plotMMDist(d_director_all,"../../results/graphs/PropModality/Director_all_TurnTypes.pdf")
dx_matcher = plotMMDist(d_matcher,"../../results/graphs/PropModality/Matcher_TurnTypes.pdf")
pdf("../../results/graphs/PropModality/DirectorAndMatcher_TurnTypes.pdf", width=8, height=4)
g1 = ggplot(data=dx_director, aes(x=condition,y=count,fill=turnModalityType)) +
geom_bar(position="dodge",stat="identity") +
theme(legend.position="left", panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_text(angle=0, vjust = 0.5),
plot.title = element_text(hjust=0.5),)  +
ylim(0,320) +
labs(fill="") + ylab("Count") + xlab("") + geom_vline(xintercept = 1.5, color='white') +
ggtitle("Directors")
g2 = ggplot(data=dx_matcher, aes(x=condition,y=count,fill=turnModalityType)) +
geom_bar(position="dodge",stat="identity") +
theme(legend.position="none", panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_text(angle=0, vjust = 0.5),
plot.title = element_text(hjust=0.5))  +
ylim(0,320) +
labs(fill="") + ylab("") + xlab("") + geom_vline(xintercept = 1.5, color='white') +
ggtitle("Matchers")
grid.arrange(g1, g2, ncol=2, widths=c(1,0.6))
dev.off()
library(gplots)
library(RColorBrewer)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
d$game = d$game + 1
numberOfRepairs = tapply(d$turnType, d$trialString, function(X){
sum(X %in% c("T2","T4","T6",'T8','T10'))
})
condition = tapply(d$condition, d$trialString, head,n=1)
modalityCondition = tapply(d$modalityCondition, d$trialString, head,n=1)
game = tapply(d$game, d$trialString, head,n=1)
categories = paste(modalityCondition,condition,game)
plotmeans(numberOfRepairs[modalityCondition=="vocal" & condition=="Auditory"]~
categories[modalityCondition=="vocal" & condition=="Auditory"],
connect=T,
xaxt='n',
xlab='Condition',
ylab="Number of repairs")
axis(1,at=c(1.5,3.5,5.5), c("Multimodal",'Visual',"Vocal"))
visual = table(d[d$condition=="Visual",]$turnType %in% c("T2","T4","T6",'T8','T10'),
d[d$condition=="Visual",]$game,
d[d$condition=="Visual",]$modalityCondition)
auditory = table(d[d$condition=="Auditory",]$turnType %in% c("T2","T4","T6",'T8','T10'),
d[d$condition=="Auditory",]$game,
d[d$condition=="Auditory",]$modalityCondition)
cols = brewer.pal(3,'Pastel1')
yrange = c(0,35)
pdf("../../results/graphs/Repairs/TotalNumberOfRepairs.pdf",
width=10, height=5)
par(mfrow=c(1,2))
barplot(t(auditory[2,,]), beside=T,
xlab='Game',
ylab="Total number of matcher turns",
col = cols,
main = "Auditory stimuli",
ylim=yrange)
barplot(t(visual[2,,]), beside=T,
xlab='Game',
ylab="Total number of matcher turns",
col = cols,
main = "Visual stimuli",
ylim=yrange)
legend(10, yrange[2], legend=c("Multimodal",'Visual',"Acoustic"),
pch=15,
col = cols)
dev.off()
########
# General number of trials with T2
d = read.csv("../../data/FinalSignalData.csv", stringsAsFactors = F)
table(d$turnType)
numTurns  = tapply(d$turnType, d$trialString, function(X){
length(unique(X))
})
dyads = tapply(d$dyadNumber, d$trialString, head,n=1)
m = tapply(d$modalityCondition, d$trialString, head, n=1)
cond = tapply(d$condition, d$trialString, head, n=1)
tx = table(m,cond,numTurns>1)
tx2 = tx[,,2]/ (tx[,,1]+tx[,,2])
library(RColorBrewer)
cols = brewer.pal(3,'Pastel1')
pdf("../../results/graphs/Repairs/ProportionOfTrialsWithT2.pdf",
width=7, height=4)
barplot(tx2,beside = T,
ylab = 'Proportion of trials with a T2',
col = cols,
ylim=c(0,0.12),
names.arg = c("Auditory Stimuli","Visual Stimuli"))
legend(3.25, 0.12, legend=c("Multimodal",'Visual',"Acoustic"),
pch=15,
col = cols)
dev.off()
