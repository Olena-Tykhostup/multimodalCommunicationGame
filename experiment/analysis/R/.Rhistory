control=gcontrol)
finalModel = mTryXF
xi = sjp.int(finalModel, swap.pred = T, facet.grid = F,
prnt.plot = F)
xi
xi[[2]]
xi$plot.list[[2]]
g = xi$plot.list[[2]]
g + ylim(c(0,10))
g + coord_cartesian(ylim=c(0,10))
g + coord_cartesian(ylim=c(0,1))
xi = sjp.int(finalModel, swap.pred = T, facet.grid = F,
prnt.plot = F)
for(i in 1:3){
freq.mx = xi$plot.list[[i]]$data$x
xi$plot.list[[i]]$data$x =
exp(freq.mx*
attr(variants$freq_week_1_total.logcenter, 'scaled:scale') +
attr(variants$freq_week_1_total.logcenter, 'scaled:center') -1)
}
ggplot(xi$plot.list[[1]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="T0")
xi$plot.list[[2]]$data$grp = c("No","Yes")[as.numeric(xi$plot.list[[2]]$data$grp)]
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Teach")
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Teach") +
coord_cartesian(ylim=c(0,1))
xi$plot.list[[3]]$data$grp = c("No","Yes")[as.numeric(xi$plot.list[[3]]$data$grp)]
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked")
ggplot(xi$plot.list[[2]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,1))
ggplot(xi$plot.list[[3]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,1))
ggplot(xi$plot.list[[3]]$data, aes(x,y,colour=grp)) +
geom_line()  +
xlab("Frequency") +
ylab("Predicted incidents for final week frequency") +
theme(legend.position="top") +
scale_color_discrete(name="Try Marked") +
coord_cartesian(ylim=c(0,0.1))
library(ggplot2)
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
useOnlyDirector = F
d = read.csv("../data/processedData/variants_processed.csv", stringsAsFactors = F)
d = d[d$sign_value!='SAME',]
d = d[d$sign_value!='',]
d = d[d$sign_value!='?',]
d[d$sign_value=="FOLWER",]$sign_value = "FLOWER"
d[d$sign_value=="BIGHT",]$sign_value = "BRIGHT"
d[d$sign_value=="SIGINING",]$sign_value = "SIGNING"
colourNumbers = c("1","5",'6',"7","14",'18','24')
colourNames = c("red",'brown','white','black','green','yellow','pink')
names(colourNames) = colourNumbers
colourNamesDark = c("dark red", 'orange','gray', 'dark gray', 'dark green','gold', 'purple')
d = d[d$trial_value %in% colourNumbers,]
d$trialColourName = colourNames[d$trial_value]
d$trialColourName = factor(d$trialColourName, levels = colourNames)
individuals = unique(c(d$part1,d$part2))
individuals = c("India",'Jordan','Indonesia',"Nepal")
getLetters = function(pairs){
letterCount = 1
let = matrix(nrow=6,ncol=4)
colnames(let) = individuals
currentLetter = "A"
for(i in 1:nrow(pairs)){
let[letterCount,pairs[i,]$part1] = currentLetter
let[letterCount,pairs[i,]$part2] = currentLetter
if(currentLetter=="A"){
currentLetter = "B"
} else{
currentLetter = "A"
}
if(i %% 2==0){
letterCount = letterCount +1
}
}
return(let)
}
makeTamatizPlot = function(res,pairs){
variants = unique((res[!is.na(res)]))
colours = rainbow(length(variants))
names(colours) = variants
col = colours[res]
col[is.na(col)] = 'white'
col = matrix(col, ncol=4)
# note that we're plotting upside down!
plot(c(5,1),c(7,1),type='n',xaxt='n',yaxt='n',xlab='',ylab='', bty='n',ylim=c(7,0.9),xlim=c(0.5,5.2))
for(j in 1:6){
for(i in 1:4){
rect(i,j,i+0.9,j+0.9,col = col[j,i])
text(i+0.5,j+0.8,res[j,i],cex=0.5)
}
}
text((1:4)+0.5,rep(0.8,4),individuals)
text(rep(0.8,6),(1:6)+0.5,paste("S",rep(1:3,2),sep=''))
#text(rep(0.8,6),(1:6)+0.5,paste("S",rep(1:3,2),sep=''))
text(rep(0.6,2),c(2.5,5.5),c("Week1","Week4") ,srt=90)
abline(h=3.95)
letters = getLetters(pairs)
for(i in 1:6){
for(j in 1:4){
text(j+0.5,i+0.5,letters[7-i,j])
}
}
}
colourID = colourNumbers
colourID = colourNumbers[1]
res = matrix(nrow=6,ncol=4)
colnames(res) = individuals
rowTracker = 1
week = d$week[1]
for(week in unique(d$week)){
pairs = unique(paste(d[d$week==week,]$part1,d[d$week==week,]$part2, d[d$week==week,]$session))
dx = d[d$week==week & d$trial_value==colourID,]
dx$pair = paste(dx$part1,dx$part2,dx$session)
for(session in 1:3){
dxx = dx[dx$session==session,]
if(useOnlyDirector){
dxx = dxx[dxx$director==dxx$speaker,]
}
firstSigns = tapply(dxx$sign_value,dxx$speakerName,head,n=1)
res[rowTracker,] = firstSigns[individuals]
rowTracker = rowTracker + 1
}
}
pairs = d[,c("part1","part2","week","session")]
pairs = pairs[!duplicated(apply(pairs,1,paste,collapse='')),]
res
pairs
head(d)
sigLenByGame
---
title: "Turn Modality"
output:
pdf_document:
toc: true
latex_engine: xelatex
---
```{r echo=F}
try(setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/"))
```
# Summary
The first hypothesis is that multimodal signallers can quickly establish common ground, and so later signals can be reduced to just one modality.
The second hypothesis is that multimodal signallers are quicker because they flexibly deploy signals when they need (visual signals for visual stimuli, multimodal signals for acoustic stimuli). That is, gesture can lend a hand to vocalisations.
We look at two measures:
-  **Trial length**: The time from the start of the director's first turn to the matcher clicking their choice.
-  **Turn length**: The duration of the director's first turn in the trial.
### Findings
Unimodal visual signals (or trials starting with a unimodal visual signal) are slower compared to multimodal signals, expecially for visual stimuli. This is kind of unexpected, since multimodal signals include visual signals.
Participants in the multimodal condition end up with faster trial times, even when using unimodal signals.
Participants in the multimodal condition end up with faster turn times, even when using unimodal signals, but only for acoustic signals.
For participants in the multimodal condition, there is not much change in the proportion of signal types across the 4 games.
Participants don't switch their signals much. If they start signalling a stimulus with a multimodal signal, 90% of the time they continue to use a multimodal signal. Switching from multimodal to unimodal is as likely as switching from unimodal to multimodal.
If you did want to find examples of switching, Dyad D17 auditory items are the best bet.
Turn length generally decreases, except for vocal signals for auditionary stimuli, which increase slightly. This may be due to less feedback.
# Load data
```{r echo=T,warning=FALSE, message=FALSE}
library(lme4)
library(sjPlot)
library(ggplot2)
library(lattice)
library(dplyr)
library(Gmisc)
```
```{r echo=T}
d = read.csv("../../data/FinalSignalData.csv")
#Variable for length of first T1
T1L = tapply(d[d$turnType=="T1",]$turnLength,
d[d$turnType=="T1",]$trialString, head, n=1)
d$T1Length = T1L[d$trialString]
d$T1Length[is.na(d$T1Length)] = mean(d$T1Length,na.rm=T)
d$T1Length.log = log(d$T1Length)
d$T1Length.log = d$T1Length.log - mean(d$T1Length.log)
# We don't need info on every signal in each turn,
# just the trial time.  Keep only 1st signal in each trial.
d = d[!duplicated(d$trialString),]
#Make a variable to represent proportion of games played:
# Make a variable that represents the number of trials played
d$trialTotal = d$trial + (d$game * (max(d$trial)+1))
# Convert to proportion of games played, so that estimates reflect change per game.
d$trialTotal = d$trialTotal / 16
#Transform it using a log transform, then center the data.
d$trialLength.log = log(d$trialLength)
meanLogTrialLength = mean(d$trialLength.log)
d$trialLength.log = d$trialLength.log - meanLogTrialLength
# Center the trialTotal variable so intercept reflects after the first game
d$trialTotal = d$trialTotal - 2
matcherResponds.cumulative.mean = mean(d$matcherResponds.cumulative)
d$matcherResponds.cumulative = d$matcherResponds.cumulative - matcherResponds.cumulative.mean
d$matcherResponds = factor(d$matcherResponds)
#Make a variable for which stimuli the players experienced first.
firstBlock = tapply(as.character(d$condition),d$dyadNumber,head,n=1)
d$firstBlock = as.factor(firstBlock[match(d$dyadNumber,names(firstBlock))])
#Reorder some levels so that the intercept reflects the most frequent condition.
d$incorrect = !d$correct
#Variable for whether T1 was a multimodal signal.
turnD = read.csv("../../data/Final_Turn_data.csv")
turnD = turnD[turnD$turnType=="T1",]
turnD = turnD[turnD$role == "Director",]
d$multimodal = turnD[match(d$trialString, turnD$trialString),]$turnModalityType == "multi"
d$multimodal[is.na(d$multimodal)] = F
d$turnModalityType = turnD[match(d$trialString, turnD$trialString),]$turnModalityType
#Data frame with just multimodal condition data:
dm = d[d$modalityCondition=="multi",]
dm = dm[dm$turnModalityType!="unimoda mixed",]
```
\newpage
# Graphs: Turn types
## Distribution of turn types by game (multimodal condition)
```{r echo=F,fig.height=3.5}
turnTypeByGame = dm %>% group_by(game,turnModalityType) %>% tally %>% mutate(prop = n / sum(n))
turnTypeByGame$turnModalityType = factor(turnTypeByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
turnTypeByGame$game = turnTypeByGame$game+1
ggplot(turnTypeByGame,aes(y=prop,fill=turnModalityType,x=game)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set2", name="Turn modality") +
ylab("Proportion of trials")+
xlab("Game")
```
Split by stimulus type:
```{r echo=F,fig.height=3.5}
turnTypeByGame = dm %>%
group_by(game,turnModalityType,condition) %>%
tally
turnTypeByGame$prop = 0
for(cond in unique(turnTypeByGame$condition)){
for(game in unique(turnTypeByGame$game)){
turnTypeByGame[turnTypeByGame$condition==cond & turnTypeByGame$game==game,]$prop =
turnTypeByGame[turnTypeByGame$condition==cond & turnTypeByGame$game==game,]$n / sum(turnTypeByGame[turnTypeByGame$condition==cond & turnTypeByGame$game==game,]$n)
}}
turnTypeByGame$turnModalityType = factor(turnTypeByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
turnTypeByGame$game = turnTypeByGame$game+1
ggplot(turnTypeByGame,aes(y=prop,fill=turnModalityType,x=game)) +
geom_bar(stat="identity") +
facet_grid(.~condition) +
scale_fill_brewer(palette="Set2", name="Turn modality") +
ylab("Proportion of trials")+
xlab("Game")
```
# Graphs: Trial length
## Trial length by turn modality
```{r echo=F,fig.height=3.5}
sigLenByGame = dm %>% group_by(game,turnModalityType) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for participants in the multimodal condition") +
xlab("Game") +
ylab("Trial length (seconds)")
```
Unimodal visual signals seem to have longer trial times, but if we split this by stimulus type, we se ethere are smaller differences:
```{r echo=F,fig.height=3.5}
sigLenByGame = dm %>% group_by(game,turnModalityType,condition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
sigLenByGame
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for participants in the multimodal condition") +
xlab("Game") +
ylab("Trial length (seconds)")
sigLenByGame = dm %>% group_by(game,turnModalityType) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for participants in the multimodal condition") +
xlab("Game") +
ylab("Trial length (seconds)")
sigLenByGame = dm %>% group_by(game,turnModalityType,condition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
facet_grid(.~condition) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for participants in the multimodal condition (by stimulus type)") +
xlab("Game") +
ylab("Trial length (seconds)")
sigLenByGame
dx = d
dx = dx[!(dx$turnModalityType=="unimodal visual" & dx$modalityCondition=="vocal"),]
dx = dx[!(dx$turnModalityType=="unimodal acoustic" & dx$modalityCondition=="visual"),]
dx = dx[dx$turnModalityType!="multi",]
sigLenByGame = dx %>% group_by(game,turnModalityType,modalityCondition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition + condition) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
sigLenByGame
dx = d
dx = dx[!(dx$turnModalityType=="unimodal visual" & dx$modalityCondition=="vocal"),]
dx = dx[!(dx$turnModalityType=="unimodal acoustic" & dx$modalityCondition=="visual"),]
dx = dx[dx$turnModalityType!="multi",]
sigLenByGame = dx %>% group_by(game,turnModalityType,modalityCondition,condition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition + condition) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition,.~ condition) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition,rows = condition) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition,rows = "condition") +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(. ~ modalityCondition,rows = list("condition")) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
?facet_grid
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(cols=vars(modalityCondition),rows = vars(condition)) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
dx = d
dx = dx[!(dx$turnModalityType=="unimodal visual" & dx$modalityCondition=="vocal"),]
dx = dx[!(dx$turnModalityType=="unimodal acoustic" & dx$modalityCondition=="visual"),]
sigLenByGame = dx %>% group_by(game,turnModalityType,modalityCondition,condition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
facet_grid(cols=vars(modalityCondition),rows = vars(condition)) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for trials starting with unimodal director turn (by condition)") +
xlab("Game") +
ylab("Trial length (seconds)")
