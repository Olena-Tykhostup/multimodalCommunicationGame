summary(lm(cbind(log(turnLength.norm),comprehensionTime.norm)~
(modalityCondition * condition *turnModalityType),
data = dx[dx$game==3,]))
summary(lm(cbind(log(turnLength.norm),comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition),
data = dx[dx$game==3,]))
ggplot(dx,aes(x=turnLength,y=turnLength,group=turnModalityType)) +
geom_point()
ggplot(dx,aes(x=condition,y=turnLength,group=turnModalityType)) +
geom_point()
library(gplots)
plotmeans(dx$turnLength ~ paste(dx$turnModalityType,dx$condition))
plotmeans(dx$turnLength ~ paste(dx$condition,dx$turnModalityType))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType,dx$modalityCondition))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType,dx[dx$game==3,]$modalityCondition))
summary(lm(cbind(log(turnLength.norm),comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition) +
turnModalityType:condition:modalityCondition,
data = dx[dx$game==3,]))
summary(lm(cbind(turnLength.norm,comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition) +
turnModalityType:condition:modalityCondition,
data = dx[dx$game==3,]))
summary(lm(cbind(turnLength.norm,comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition),
data = dx[dx$game==3,]))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2)
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2,mar=c(6,2,1,1))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2,mar=c(8,2,1,1))
par(mar=c(8,2,1,1))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2,mar=c(8,2,1,1))
par(mar=c(10,2,1,1))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2,xlab="")
ggplot(dx,aes(x=condition,y=turnLength,group=turnModalityType)) +
geom_point()
par(mar=c(10,2,1,1))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType),
las=2,xlab="")
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType,dx[dx$game==3,]$modalityCondition),
las=2,xlab="")
par(mar=c(12,2,1,1))
plotmeans(dx[dx$game==3,]$turnLength ~ paste(dx[dx$game==3,]$condition,dx[dx$game==3,]$turnModalityType,dx[dx$game==3,]$modalityCondition),
las=2,xlab="")
summary(lm(cbind(turnLength.norm,comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition),
data = dx[dx$game==3,]))
dxx = dx[dx$turnModalityType!="multi" | dx$modalityCondition=="multi",]
table(dxx$turnModalityType,dxx$modalityCondition)
dxx = dx[dx$turnModalityType=="multi" | dx$modalityCondition!="multi",]
table(dxx$turnModalityType,dxx$modalityCondition)
summary(lm(comprehensionTime.norm~modalityCondition*condition,data=dxx))
summary(lm(cbind(comprehensionTime.norm,turnLength.norm)~modalityCondition*condition,data=dxx))
contrasts(dx$condition) <- contr.sum(2)/2
dx$condition = relevel(dx$condition,"Visual")
summary(lm(cbind(turnLength.norm,comprehensionTime.norm)~
(modalityCondition * condition) + (turnModalityType*condition),
data = dx[dx$game==3,]))
plot(ctree(modalityCondition~condition+ comprehensionTime+turnLength,data=dx[dx$game==3,],
controls = ctree_control(mincriterion = 0.9)))
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
?t.test
0.00805*4
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
compl.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
In contrast, if we compare trials where the director used unimodal acoustic turns to describe auditory stimuli (top right panel), by game 4 the advantage in the multimodal condition is mainly in the length of the director’s turn.
turnLength.norm
modalityConditionvocal:condition1   0.72344    0.12859   5.626 3.20e-08 ***
Unimodal acoustic for auditory stim
game x condition (turn length sig)
game x condition (comp non-sig)?
```{r}
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Further, comparing trials where the director used unimodal visual turns to describe auditory stimuli (top left panel), by game 4 we see an advantage for  participants in the multimodal condition for both the director’s turn and comprehension time.
Unimodal visual for auditory stim:
game x condition (comp sig)
game x condition (turn length sig)
```{r}
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
compl.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
compl.t3$p.value = compl.t3$p.value*4
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
In contrast, if we compare trials where the director used unimodal acoustic turns to describe auditory stimuli (top right panel), by game 4 the advantage in the multimodal condition is mainly in the length of the director’s turn.
turnLength.norm
modalityConditionvocal:condition1   0.72344    0.12859   5.626 3.20e-08 ***
Unimodal acoustic for auditory stim
game x condition (turn length sig)
game x condition (comp non-sig)?
```{r}
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Further, comparing trials where the director used unimodal visual turns to describe auditory stimuli (top left panel), by game 4 we see an advantage for  participants in the multimodal condition for both the director’s turn and comprehension time.
Unimodal visual for auditory stim:
game x condition (comp sig)
game x condition (turn length sig)
```{r}
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
compl.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Finally, comparing game 4 for the multimodal turns in the multimodal condition (central column) to the unimodal turns in the gesture-only and vocal-only conditions, we see that participants in the multimodal condition have shorter comprehension times for auditory stimuli and equal or shorter turn lengths for visual stimuli.
```{r}
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
```
```{r}
compl.t1$p.value = compl.t1$p.value*4
compl.t2$p.value = compl.t2$p.value*4
compl.t3$p.value = compl.t3$p.value*4
compl.t4$p.value = compl.t4$p.value*4
tlen.t1$p.value = tlen.t1$p.value*4
tlen.t2$p.value = tlen.t2$p.value*4
tlen.t3$p.value = tlen.t3$p.value*4
tlen.t4$p.value = tlen.t4$p.value*4
compl.t1
compl.t2
compl.t3
compl.t4
tlen.t1
tlen.t2
tlen.t3
tlen.t4
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
In contrast, if we compare trials where the director used unimodal acoustic turns to describe auditory stimuli (top right panel), by game 4 the advantage in the multimodal condition is mainly in the length of the director’s turn.
turnLength.norm
modalityConditionvocal:condition1   0.72344    0.12859   5.626 3.20e-08 ***
Unimodal acoustic for auditory stim
game x condition (turn length sig)
game x condition (comp non-sig)?
```{r}
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Further, comparing trials where the director used unimodal visual turns to describe auditory stimuli (top left panel), by game 4 we see an advantage for  participants in the multimodal condition for both the director’s turn and comprehension time.
Unimodal visual for auditory stim:
game x condition (comp sig)
game x condition (turn length sig)
```{r}
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
comp.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Finally, comparing game 4 for the multimodal turns in the multimodal condition (central column) to the unimodal turns in the gesture-only and vocal-only conditions, we see that participants in the multimodal condition have shorter comprehension times for auditory stimuli and equal or shorter turn lengths for visual stimuli.
```{r}
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
```
```{r}
comp.t1$p.value = compl.t1$p.value*4
comp.t2$p.value = compl.t2$p.value*4
comp.t3$p.value = compl.t3$p.value*4
comp.t4$p.value = compl.t4$p.value*4
tlen.t1$p.value = tlen.t1$p.value*4
tlen.t2$p.value = tlen.t2$p.value*4
tlen.t3$p.value = tlen.t3$p.value*4
tlen.t4$p.value = tlen.t4$p.value*4
comp.t1
comp.t2
comp.t3
comp.t4
tlen.t1
tlen.t2
tlen.t3
tlen.t4
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
In contrast, if we compare trials where the director used unimodal acoustic turns to describe auditory stimuli (top right panel), by game 4 the advantage in the multimodal condition is mainly in the length of the director’s turn.
turnLength.norm
modalityConditionvocal:condition1   0.72344    0.12859   5.626 3.20e-08 ***
Unimodal acoustic for auditory stim
game x condition (turn length sig)
game x condition (comp non-sig)?
```{r}
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Further, comparing trials where the director used unimodal visual turns to describe auditory stimuli (top left panel), by game 4 we see an advantage for  participants in the multimodal condition for both the director’s turn and comprehension time.
Unimodal visual for auditory stim:
game x condition (comp sig)
game x condition (turn length sig)
```{r}
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
comp.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Finally, comparing game 4 for the multimodal turns in the multimodal condition (central column) to the unimodal turns in the gesture-only and vocal-only conditions, we see that participants in the multimodal condition have shorter comprehension times for auditory stimuli and equal or shorter turn lengths for visual stimuli.
```{r}
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
```
```{r}
comp.t1$p.value = p.adjust(compl.t1$p.value,4)
comp.t2$p.value = p.adjust(compl.t2$p.value,4)
comp.t3$p.value = p.adjust(compl.t3$p.value,4)
comp.t4$p.value = p.adjust(compl.t4$p.value,4)
tlen.t1$p.value = p.adjust(tlen.t1$p.value,4)
tlen.t2$p.value = p.adjust(tlen.t2$p.value,4)
tlen.t3$p.value = p.adjust(tlen.t3$p.value,4)
tlen.t4$p.value = p.adjust(tlen.t4$p.value,4)
comp.t1
comp.t2
comp.t3
comp.t4
tlen.t1
tlen.t2
tlen.t3
tlen.t4
p.adjust(0.01,4)
p.adjust(0.01,n=4)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
In contrast, if we compare trials where the director used unimodal acoustic turns to describe auditory stimuli (top right panel), by game 4 the advantage in the multimodal condition is mainly in the length of the director’s turn.
turnLength.norm
modalityConditionvocal:condition1   0.72344    0.12859   5.626 3.20e-08 ***
Unimodal acoustic for auditory stim
game x condition (turn length sig)
game x condition (comp non-sig)?
```{r}
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Further, comparing trials where the director used unimodal visual turns to describe auditory stimuli (top left panel), by game 4 we see an advantage for  participants in the multimodal condition for both the director’s turn and comprehension time.
Unimodal visual for auditory stim:
game x condition (comp sig)
game x condition (turn length sig)
```{r}
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
comp.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
```
Finally, comparing game 4 for the multimodal turns in the multimodal condition (central column) to the unimodal turns in the gesture-only and vocal-only conditions, we see that participants in the multimodal condition have shorter comprehension times for auditory stimuli and equal or shorter turn lengths for visual stimuli.
```{r}
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
```
```{r}
comp.t1$p.value = p.adjust(compl.t1$p.value,4)
comp.t2$p.value = p.adjust(compl.t2$p.value,4)
comp.t3$p.value = p.adjust(compl.t3$p.value,4)
comp.t4$p.value = p.adjust(compl.t4$p.value,4)
tlen.t1$p.value = p.adjust(tlen.t1$p.value,4)
tlen.t2$p.value = p.adjust(tlen.t2$p.value,4)
tlen.t3$p.value = p.adjust(tlen.t3$p.value,4)
tlen.t4$p.value = p.adjust(tlen.t4$p.value,4)
comp.t1
comp.t2
comp.t3
comp.t4
tlen.t1
tlen.t2
tlen.t3
tlen.t4
ctm0 = lmer(comprehensionTime.norm ~
modalityCondition * condition *
turnModalityType
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data = dx[dx$game==3,])
summary(ctm0)
Anova(ctm0)
library(lmerTest)
summary(ctm0)
ctm0 = lmer(comprehensionTime.norm ~
modalityCondition * condition *
turnModalityType
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data = dx[dx$game==3,])
ctm0 = lmer(comprehensionTime.norm ~
modalityCondition * condition *
turnModalityType +
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data = dx[dx$game==3,])
summary(ctm0)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1$p.value = p.adjust(compl.t1$p.value,4)
comp.t1
tlen.t1 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
tlen.t1$p.value = p.adjust(tlen.t1$p.value,4)
tlen.t1
comp.t1 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value = p.adjust(compl.t1$p.value,4)
comp.t1
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value = p.adjust(comp.t1$p.value,4)
comp.t1
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value = p.adjust(comp.t1$p.value,n=4)
comp.t1
comp.t1b = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1b$p.value = p.adjust(comp.t1b$p.value,n=4)
comp.t1b
comp.t1b = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1b$p.value = p.adjust(comp.t1b$p.value,n=5)
comp.t1b
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value = p.adjust(comp.t1$p.value,n=5)
comp.t1
comp.t1b = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1b$p.value = p.adjust(comp.t1b$p.value,n=5)
comp.t1b
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t2$p.value = p.adjust(comp.t2$p.value,n=5)
comp.t2
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2$p.value = p.adjust(tlen.t2$p.value,n=4)
tlen.t2
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
comp.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t3$p.value = p.adjust(comp.t3$p.value,n=5)
comp.t3
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3$p.value = p.adjust(tlen.t3$p.value,n=4)
tlen.t3
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
comp.t4$p.value = p.adjust(comp.t4$p.value,n=5)
comp.t4
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
tlen.t4$p.value = p.adjust(tlen.t4$p.value,n=4)
tlen.t4
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==1,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
comp.t1$p.value = p.adjust(comp.t1$p.value,n=5)
comp.t1
comp.t1b = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1b$p.value = p.adjust(comp.t1b$p.value,n=5)
comp.t1b
m.turnLength = lmer(turnLength.norm ~ 1 + modalityCondition*condition*trialTotal +
I(trialTotal^2) +(modalityCondition:I(trialTotal^2)) +
matcherResponds*modalityCondition*condition +
matcherResponds.cumulative +
matcherResponds.cumulative:modalityCondition +
incorrect *modalityCondition*condition +
multimodal + multimodal:condition +
matcherResponds +
firstBlock +
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = TRUE, control = ctrl)
head(dx)
# lme4 version 1.1-21 introduces different default optimisers
# Switch back to original:
ctrl = lmerControl(optimizer = "bobyqa")
m.turnLength = lmer(turnLength.norm ~ 1 + modalityCondition*condition*trialTotal +
I(trialTotal^2) +(modalityCondition:I(trialTotal^2)) +
matcherResponds*modalityCondition*condition +
matcherResponds.cumulative +
matcherResponds.cumulative:modalityCondition +
incorrect *modalityCondition*condition +
multimodal + multimodal:condition +
matcherResponds +
firstBlock +
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = TRUE, control = ctrl)
m.compTime = lmer(comprehensionTime.norm ~ 1 + modalityCondition*condition*trialTotal +
I(trialTotal^2) +(modalityCondition:I(trialTotal^2)) +
matcherResponds*modalityCondition*condition +
matcherResponds.cumulative +
matcherResponds.cumulative:modalityCondition +
incorrect *modalityCondition*condition +
multimodal + multimodal:condition +
matcherResponds +
firstBlock +
(1 + condition + incorrect |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = TRUE, control = ctrl)
summary(m.turnLength)
summary(m.turnLength)
plot_model(m.turnLength)
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=d, REML = FALSE,control = ctrl)
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
plot_model(m.turnLength)
summary(m.turnLength)
summary(m.turnLength)
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
summary(m.turnLength)
plot_model(m.turnLength)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
plot_model(m.compTime)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
plot_model(m.compTime)
plot_model(m.turnLength)
summary(m.compTime)
?plot_model
m.turnLength.stat = get_model(m.turnLength)
m.compTime.stat = get_model(m.compTime)
