allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals= x[[3]]
xyplot(trialLength/1000~game | dyadNumber+condition,
data=d[d$modalityCondition=="multi",],
type='a',
ylim=c(0,40),
main="Trial length in the multimodal condition")
xyplot(propAcousticSignals_VisualStimT3~dyads_propAcousticSignals)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals= x[[3]]
games_propAcousticSignals= x[[4]]
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads,
games=games))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals= x[[3]]
games_propAcousticSignals= x[[4]]
xyplot(propAcousticSignals_VisualStimT3~games|dyads_propAcousticSignals)
xyplot(propAcousticSignals_VisualStimT3~games_propAcousticSignals|dyads_propAcousticSignals)
type='a')
xyplot(propAcousticSignals_VisualStimT3~games_propAcousticSignals|dyads_propAcousticSignals,
type='a')
table(games_propAcousticSignals)
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals|dyads_propAcousticSignals,
type='a')
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals|factor(dyads_propAcousticSignals),
type='a')
propAcousticSignals_AuditoryStim
type='p')
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals|factor(dyads_propAcousticSignals),
type='p')
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals|factor(dyads_propAcousticSignals), type='p')
table(dyads_propAcousticSignals)
tapply(propAcousticSignals_AuditoryStim,dyads_propAcousticSignals,mean)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads,
games=games))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals= x[[3]]
games_propAcousticSignals= x[[4]]
tapply(propAcousticSignals_AuditoryStim,dyads_propAcousticSignals,mean)
length(propAcousticSignals_AuditoryStim)
length(dyads_propAcousticSignals)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads.vis = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.vis = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
dyads.ac = tapply(d[acousticSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.ac = tapply(d[acousticSel,]$game,
d[visualSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads,
games.vis=games.vis,
games.ac = games.ac))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals_A= x[[3]]
games_propAcousticSignals_A= x[[4]]
dyads_propAcousticSignals_V= x[[5]]
games_propAcousticSignals_V= x[[6]]
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads.vis = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.vis = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
dyads.ac = tapply(d[acousticSel,]$dyadNumber,
d[acousticSel,]$trialString,
head,n=1)
games.ac = tapply(d[acousticSel,]$game,
d[acousticSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds= dyads,
games.vis=games.vis,
games.ac = games.ac))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals_A= x[[3]]
games_propAcousticSignals_A= x[[4]]
dyads_propAcousticSignals_V= x[[5]]
games_propAcousticSignals_V= x[[6]]
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads.vis = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.vis = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
dyads.ac = tapply(d[acousticSel,]$dyadNumber,
d[acousticSel,]$trialString,
head,n=1)
games.ac = tapply(d[acousticSel,]$game,
d[acousticSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds.ac= dyads.ac,
games.ac = games.ac,
dyads.vis=dyads.vis,
games.vis=games.vis
))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals_A= x[[3]]
games_propAcousticSignals_A= x[[4]]
dyads_propAcousticSignals_V= x[[5]]
games_propAcousticSignals_V= x[[6]]
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals_A|factor(dyads_propAcousticSignals_A), type='p')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='p')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V))
length(dyads_propAcousticSignals_V)
length(propAcousticSignals_AuditoryStim)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads.vis = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.vis = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
dyads.ac = tapply(d[acousticSel,]$dyadNumber,
d[acousticSel,]$trialString,
head,n=1)
games.ac = tapply(d[acousticSel,]$game,
d[acousticSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds.ac= dyads.ac,
games.ac = games.ac,
dyads.vis=dyads.vis,
games.vis=games.vis
))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals_A= x[[3]]
games_propAcousticSignals_A= x[[4]]
dyads_propAcousticSignals_V= x[[5]]
games_propAcousticSignals_V= x[[6]]
length(dyads_propAcousticSignals_V)
length(propAcousticSignals_AuditoryStim)
propAcousticSignals_AuditoryStim
length(propAcousticSignals_AuditoryStim)
length(dyads_propAcousticSignals_A)
dyads_propAcousticSignals_A
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
# load function to make mirrored plots
source("multiHist.R")
getPropTimeAcoustic = function(acousticSel,visualSel){
# Add the signal time for each modality for each trial
acousticTime = tapply(d[acousticSel,]$signalLength,
d[acousticSel,]$trialString,
sum)
visualTime = tapply(d[visualSel,]$signalLength,
d[visualSel,]$trialString,
sum)
dyads.vis = tapply(d[visualSel,]$dyadNumber,
d[visualSel,]$trialString,
head,n=1)
games.vis = tapply(d[visualSel,]$game,
d[visualSel,]$trialString,
head,n=1)
dyads.ac = tapply(d[acousticSel,]$dyadNumber,
d[acousticSel,]$trialString,
head,n=1)
games.ac = tapply(d[acousticSel,]$game,
d[acousticSel,]$trialString,
head,n=1)
# Make sure there's a time for each trial
# if the trial time is NA, set it to zero
allTrials = unique(d[d$modalityCondition=="multi",]$trialString)
visualTime= visualTime[allTrials]
visualTime[is.na(visualTime)] = 0
acousticTime= acousticTime[allTrials]
acousticTime[is.na(acousticTime)] = 0
propAcousticSignals = acousticTime / (acousticTime+visualTime)
names(propAcousticSignals) = allTrials
propAcousticSignals = propAcousticSignals[!is.na(propAcousticSignals)]
#x = hist(propAcousticSignals, plot = F)
#x$counts = x$counts/length(unique(d[d$modalityCondition=="multi",]$trialString))
#plot(x, ylab="Proportion of trials")
propAcousticSignals_AuditoryStim =
propAcousticSignals[grepl("Auditory",names(propAcousticSignals))]
propAcousticSignals_VisualStim =
propAcousticSignals[grepl("Visual",names(propAcousticSignals))]
return(list(propAcousticSignals_AuditoryStim=propAcousticSignals_AuditoryStim,
propAcousticSignals_VisualStim=propAcousticSignals_VisualStim,
dayds.ac= dyads.ac[!is.na(dyads.ac)],
games.ac = games.ac[!is.na(games.ac)],
dyads.vis=dyads.vis[!is.na(dyads.vis)],
games.vis=games.vis[!is.na(games.vis)]
))
}
# which cases are T1s with acoustic/visual signals?
acousticT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Acoustic"
visualT1s = d$modalityCondition=="multi" & d$turnType=='T1' & d$modality=="Visual"
x = getPropTimeAcoustic(acousticT1s,visualT1s)
propAcousticSignals_AuditoryStim = x[[1]]
propAcousticSignals_VisualStim = x[[2]]
dyads_propAcousticSignals_A= x[[3]]
games_propAcousticSignals_A= x[[4]]
dyads_propAcousticSignals_V= x[[5]]
games_propAcousticSignals_V= x[[6]]
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V))
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='a')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='l')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='p')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='a')
xyplot(propAcousticSignals_VisualStim~games_propAcousticSignals_V|factor(dyads_propAcousticSignals_V), type='p')
xyplot(propAcousticSignals_AuditoryStim~games_propAcousticSignals_A|factor(dyads_propAcousticSignals_A), type='p')
