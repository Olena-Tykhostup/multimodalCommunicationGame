plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
arrows(1:16,1,1:16,1.9,length = 0.1)
arrows(1:16,2,1:16,2.9,length = 0.1)
arrows(1:16,3,1:16,3.9,length = 0.1)
points(as.numeric(dx$itemId),dx$game+1,
col = dx$turnModalityType.col,pch=16,cex=3)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.7,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
}
table(dx$turnModalityType)
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
arrows(1:16,1,1:16,1.9,length = 0.1)
arrows(1:16,2,1:16,2.9,length = 0.1)
arrows(1:16,3,1:16,3.9,length = 0.1)
points(as.numeric(dx$itemId),dx$game+1,
col = dx$turnModalityType.col,pch=16,cex=3)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
dx = dm[dm$dyadNumber==dyad,]
dxx = dx[dx]
unique(dm$itemId)
sort(unique(dm$itemId))
dxx = dx[dx$itemId==item,]
item = sort(unique(dm$itemId))[1]
dxx = dx[dx$itemId==item,]
dxx[order(dxx$game),]$turnModalityType
dx = dm[dm$dyadNumber==dyad,]
dxx = dx[dx$itemId==item,]
dxx[order(dxx$game),]$turnModalityType
item
dim(dx)
dim(dxx)
table(dxx$dyadNumber)
table(dxx$game)
table(dxx$itemId)
table(d$playerId)
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=3)
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
arrows(1:16,1,1:16,1.8,length = 0.1)
arrows(1:16,2,1:16,2.8,length = 0.1)
arrows(1:16,3,1:16,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=3)
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=3)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="gray")
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="gray")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="gray")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="gray")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
rect(seq(1,16,by=2),-1,seq(2,16,by=2),5)
rect(seq(1,16,by=2),-1,seq(2,16,by=2),5,col='gray)
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="gray")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="gray")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="gray")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
```
rect(seq(1,16,by=2),-1,seq(2,16,by=2),5,col='gray')
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2),-1,seq(2,16,by=2),5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="gray")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="gray")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="gray")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="gray")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="gray")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="gray")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(1,at=1:16,labels = c(1:8,1:8))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="white")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="white")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="white")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"))
axis(1,at=1:16,labels = c(1:8,1:8))
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
axis(1,at=1:16,labels = c(1:8,1:8),line=1)
axis(1,at=1:16,labels = c(1:8,1:8),line=0)
axis(1,at=1:16,labels = c(1:8,1:8),cex.axis = 2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lty = 'n')
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="white")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="white")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="white")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lty = 'n')
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
dm$turnModalityType.col = c("#FC8D62", "#8DA0CB",NA,"#66C2A5")[as.numeric(as.factor(dm$turnModalityType))]
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"1"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="white")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="white")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="white")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
axis(1,at=1:16,labels = c(1:8,1:8),line=0)
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
dm$turnModalityType.col = c("#FC8D62", "#8DA0CB",NA,"#66C2A5")[as.numeric(as.factor(dm$turnModalityType))]
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"2"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col="white")
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col="white")
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col="white")
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
axis(1,at=1:16,labels = c(1:8,1:8),line=0)
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col=c("white","gray"))
dm$turnModalityType.col = c("#FC8D62", "#8DA0CB",NA,"#66C2A5")[as.numeric(as.factor(dm$turnModalityType))]
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"2"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray')
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col=c("white","gray"))
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col=c("white","gray"))
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col=c("white","gray"))
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
axis(1,at=1:16,labels = c(1:8,1:8),line=0)
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
for(dyad in unique(dm$dyadNumber)){
dx = dm[dm$dyadNumber==dyad,]
dx1 = dm[dm$playerId == paste(dyad,"1"),]
dx2 = dm[dm$playerId == paste(dyad,"2"),]
plot(c(1,16),c(1,4),type = 'n',
xlab="Stimulus",yaxt='n',ylab="Game",xaxt='n',
main=paste("Dyad",dx$dyadNumber[1]))
rect(seq(1,16,by=2)-0.5,-1,seq(2,16,by=2)-0.5,5,col='gray',lwd = NA)
arrows(1:16-0.25,1,1:16-0.25,1.8,length = 0.1)
arrows(1:16-0.25,2,1:16-0.25,2.8,length = 0.1)
arrows(1:16-0.25,3,1:16-0.25,3.8,length = 0.1)
points(as.numeric(dx1$itemId)-0.25,dx1$game+1,
col = dx1$turnModalityType.col,pch=16,cex=2)
arrows(1:16+0.25,1,1:16+0.25,1.8,length = 0.1,col=c("white","gray"))
arrows(1:16+0.25,2,1:16+0.25,2.8,length = 0.1,col=c("white","gray"))
arrows(1:16+0.25,3,1:16+0.25,3.8,length = 0.1,col=c("white","gray"))
points(as.numeric(dx2$itemId)+0.25,dx2$game+1,
col = dx2$turnModalityType.col,pch=17,cex=2)
abline(v=8.5,lwd=2)
axis(1,at=c(4.5,12.5),labels = c("Auditory","Visual"),line=1,lwd = NA)
axis(1,at=1:16,labels = c(1:8,1:8),line=0)
axis(2,at=1:4)
legend(0,4.8,legend = c("Unimodal visual","Multi","Unimodal acoustic"),xpd=T,pch=16,
cex=0.8,col=c("#66C2A5" ,"#FC8D62","#8DA0CB"),bty='n')
}
sigLenByGame = dm %>% group_by(game,turnModalityType,condition) %>%
summarise(turnLength.mean = mean(turnLength),
sd=sd(turnLength),
ci.w = qnorm(0.95)*sd/sqrt(length(turnLength)),
upper=turnLength.mean+ci.w,
lower = turnLength.mean-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$turnLength.mean = sigLenByGame$turnLength.mean/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=turnLength.mean, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
facet_grid(. ~ condition) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Director turn length for participants in the multimodal condition") +
xlab("Game") +
ylab("Turn length (seconds)")
sigLenByGame = dm %>% group_by(game,turnModalityType,condition) %>%
summarise(Efficiency = mean(trialLength),
sd=sd(trialLength),
ci.w = qnorm(0.95)*sd/sqrt(length(trialLength)),
upper=Efficiency+ci.w,
lower = Efficiency-ci.w)
sigLenByGame$turnModalityType = factor(sigLenByGame$turnModalityType,levels=c("unimodal visual","multi","unimodal acoustic"))
sigLenByGame$game = sigLenByGame$game+1
sigLenByGame$Efficiency = sigLenByGame$Efficiency/1000
sigLenByGame$upper = sigLenByGame$upper/1000
sigLenByGame$lower = sigLenByGame$lower/1000
pd = position_dodge(width=0.1)
ggplot(sigLenByGame, aes(x=game, y=Efficiency, group=turnModalityType, colour=turnModalityType)) +
geom_errorbar(aes(ymin=lower, ymax=upper,group=turnModalityType), width=0.5,position=pd) +
stat_summary(fun.y="mean", geom="line", aes(group=turnModalityType),position=pd) +
geom_point(aes(group=turnModalityType,shape=turnModalityType),position=pd) +
facet_grid(.~condition) +
scale_colour_brewer(palette="Set2", name="Modality of director's first turn") +
scale_shape(name="Modality of director's first turn") +
theme(panel.grid.major.x = element_blank()) +
ggtitle("Trial length for participants in the multimodal condition") +
xlab("Game") +
ylab("Trial length (seconds)")
player = dm$playerId[1]
dx = dm[dm$playerId==player,]
dxx = dx[dx$itemId==item,]
dxx[order(dxx$game),]$turnModalityType
table(dm$turnModalityType)
unique(dm$turnModalityType)
unique(dm$turnModalityType)
transitions = matrix(0,nrow=3,ncol=3)
rownames(transitions) = unique(dm$turnModalityType)
colnames(transitions) = unique(dm$turnModalityType)
for(player in unique(dm$playerId)){
dx = dm[dm$playerId==player,]
for(item in sort(unique(dm$itemId))){
dxx = dx[dx$itemId==item,]
turns = dxx[order(dxx$game),]$turnModalityType
for(i in 1:3){
transitions[turns[i],turns[i+1]] = transitions[turns[i],turns[i+1]]+1
}
}
}
turns
length(turns)
turns[i]
turns = as.character(dxx[order(dxx$game),]$turnModalityType)
for(i in 1:3){
transitions[turns[i],turns[i+1]] = transitions[turns[i],turns[i+1]]+1
}
transitions = matrix(0,nrow=3,ncol=3)
rownames(transitions) = unique(dm$turnModalityType)
colnames(transitions) = unique(dm$turnModalityType)
for(player in unique(dm$playerId)){
dx = dm[dm$playerId==player,]
for(item in sort(unique(dm$itemId))){
dxx = dx[dx$itemId==item,]
turns = as.character(dxx[order(dxx$game),]$turnModalityType)
for(i in 1:3){
transitions[turns[i],turns[i+1]] = transitions[turns[i],turns[i+1]]+1
}
}
}
dxx
transitions = matrix(0,nrow=3,ncol=3)
rownames(transitions) = unique(dm$turnModalityType)
colnames(transitions) = unique(dm$turnModalityType)
for(player in unique(dm$playerId)){
dx = dm[dm$playerId==player,]
for(item in sort(unique(dm$itemId))){
dxx = dx[dx$itemId==item,]
turns = as.character(dxx[order(dxx$game),]$turnModalityType)
for(i in 1:(length(turns)-1)){
transitions[turns[i],turns[i+1]] = transitions[turns[i],turns[i+1]]+1
}
}
}
transitions
print(prop.table(transitions,1))
print(round(prop.table(transitions,1),2))
library(Gmisc)
install.packages("Gmisc")
library(Gmisc)
transitionPlot(transitions, type_of_arrow = "simple")
transitionPlot(transitions, type_of_arrow = "simple")
transitionPlot(transitions, type_of_arrow = "simple",box_width = 2)
transitionPlot(transitions, type_of_arrow = "simple",box_width = 0.4)
transitionPlot(prop.table(transitions,1), type_of_arrow = "simple",box_width = 0.4)
transitionPlot(prop.table(transitions,1), type_of_arrow = "simple",box_width = 0.4)
transitionPlot(prop.table(transitions,1),box_width = 0.4)
plot.new()
transitionPlot(prop.table(transitions,1),box_width = 0.4)
plot.new()
transitionPlot(prop.table(transitions,1),type_of_arrow = "simple",box_width = 0.4)
?transitionPlot
transitionPlot(prop.table(transitions,1),type_of_arrow = "simple",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
transitionPlot(prop.table(transitions,1),type_of_arrow = "none",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
transitionPlot(prop.table(transitions,1),type_of_arrow = "gradient",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
transitionPlot(prop.table(transitions,1),type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
plot.new()
transitionPlot(prop.table(transitions,1),type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
plot.new()
transitionPlot(prop.table(transitions,1),type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
set.seed(1)
library(magrittr)
n <- 100
data <-
data.frame(
Sex = sample(c("Male", "Female"),
size = n,
replace = TRUE),
Charnley_class = sample(c("A", "B", "C"),
size = n,
replace = TRUE))
prob <- data.frame(
A = 1/3 +
(data$Sex == "Male") * .25 +
(data$Sex != "Male") * -.25 +
(data$Charnley_class %in% "B") * -.5 +
(data$Charnley_class %in% "C") * -2 ,
B = 1/3 +
(data$Sex == "Male") * .1 +
(data$Sex != "Male") * -.05 +
(data$Charnley_class == "C") * -.5,
C = 1/3 +
(data$Sex == "Male") * -.25 +
(data$Sex != "Male") * .25)
# Remove negative probabilities
prob <- t(apply(prob, 1, function(x) {
if (any(x < 0)){
x <- x - min(x) + .05
}
x
}))
data$Charnley_class_after <-
apply(prob, 1, function(p)
sample(c("A", "B", "C"),
size = 1,
prob = p)) %>%
factor(levels = c("A", "B", "C"))
# Create the transition matrix that
# is the basis for the transition plot
trn_mtrx <-
with(data,
table(Charnley_class,
Charnley_class_after))
trn_mtrx
transitionPlot(trn_mtrx)
plot.new()
transitionPlot(trn_mtrx)
trn_mtrx
class(trn_mtrx)
typeof(trn_mtrx)
transitionPlot(transitions,type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"))
transitionPlot(transitions,type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"),new_page = T)
transitionPlot(transitions,type_of_arrow = "grid",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"),new_page = T)
transitionPlot(transitions,type_of_arrow = "simple",box_width = 0.4,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"),new_page = T)
?transitionPlot
transitionPlot(transitions,type_of_arrow = "simple",box_width = 0.4,
min_lwd = 1,
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"),new_page = T)
transitionPlot(transitions,type_of_arrow = "simple",box_width = 0.4,
min_lwd = unit(0.01, "mm"),
fill_start_box=c("#66C2A5" ,"#FC8D62","#8DA0CB"),new_page = T)
print(round(prop.table(transitions,1),2))
