scale_colour_discrete(name="Stimuli") +
scale_shape_discrete(name="Stimuli") +
xlab("Game")
gx2
pdf("../../results/graphs/Efficiency_gg_alt.pdf",
width = 5, height=3)
gx2
dev.off()
```
![The efficiency of trials in different conditions](../../results/graphs/Efficiency.pdf)
Average trial time for the whole experiment:
```{r}
mean(d$trialLength)
sd(d$trialLength)
```
The distribution of trial times is very skewed:
```{r}
hist(d$trialLength)
```
So we transform it using a log transform, then center the data.
```{r}
d$trialLength.log = log(d$trialLength)
meanLogTrialLength = mean(d$trialLength.log)
d$trialLength.log = d$trialLength.log - meanLogTrialLength
hist(d$trialLength.log)
```
```{r}
# Center the trialTotal variable so intercept reflects after the first game
d$trialTotal = d$trialTotal - 2
matcherResponds.cumulative.mean = mean(d$matcherResponds.cumulative)
d$matcherResponds.cumulative = d$matcherResponds.cumulative - matcherResponds.cumulative.mean
d$matcherResponds = factor(d$matcherResponds)
```
Make a variable for which stimuli the players experienced first.
```{r}
firstBlock = tapply(as.character(d$condition),d$dyadNumber,head,n=1)
d$firstBlock = as.factor(firstBlock[match(d$dyadNumber,names(firstBlock))])
```
Reorder some levels so that the intercept reflects the most frequent condition.
```{r}
d$incorrect = !d$correct
```
Variable for whether T1 was a multimodal signal.
```{r}
turnD = read.csv("../../data/Final_Turn_data.csv")
turnD = turnD[turnD$turnType=="T1",]
turnD = turnD[turnD$role == "Director",]
d$multimodal = turnD[match(d$trialString, turnD$trialString),]$turnModalityType == "multi"
d$multimodal[is.na(d$multimodal)] = F
```
\newpage
# Mixed models
Make a series of models with random effects for dyad, director (nested within dyad) and item.
Not all random slopes are appropriate.  For example, items are used in only one stimulus condition, so a random slope for condition by item is not appropriate.  Similarly, each dyad only plays in one modality condition.
It is reasonable to have a random slope for trial by dyad, but this caused unreliable model convergence, so is not included.
The final random slopes were for condition and incorrectness by dyad/player, and modality condition by item.
```{r models, cache=TRUE}
# lme4 version 1.1-21 introduces different default optimisers
# Switch back to original:
ctrl = lmerControl(optimizer = "bobyqa")
turnD = read.csv("../../data/Final_Turn_data.csv")
turnD = turnD[turnD$turnType=="T1",]
turnD = turnD[turnD$role == "Director",]
d$multimodal = turnD[match(d$trialString, turnD$trialString),]$turnModalityType == "multi"
d$multimodal[is.na(d$multimodal)] = F
d$turnModalityType = turnD[match(d$trialString, turnD$trialString),]$turnModalityType
dx = d
dx = dx[!(dx$turnModalityType=="unimodal visual" & dx$modalityCondition=="vocal"),]
dx = dx[!(dx$turnModalityType=="unimodal acoustic" & dx$modalityCondition=="visual"),]
turnLenByGame = dx %>% group_by(game,turnModalityType,modalityCondition,condition) %>%
summarise(Efficiency = mean(turnLength),
measure="directorTurnLength")
decisionTimeByGame = dx %>%
group_by(game,turnModalityType,modalityCondition,condition) %>%
summarise(Efficiency = mean(trialLength - turnLength),
measure="decisionTime")
dc = rbind(turnLenByGame,decisionTimeByGame)
dc$Efficiency = dc$Efficiency/1000
dc$measure = factor(dc$measure)
dc$pos = dc$game + 1
barwidth = 0.2
dc[dc$modalityCondition=="visual",]$pos = dc[dc$modalityCondition=="visual",]$pos - barwidth
dc[dc$modalityCondition=="vocal",]$pos = dc[dc$modalityCondition=="vocal",]$pos + barwidth
dc$turnModalityType = factor(dc$turnModalityType,
levels=c("unimodal visual","multi","unimodal acoustic"),
labels = c("Unimodal visual",'Mulitmodal','Unimodal acoustic'))
dc$condition = factor(dc$condition,levels=c("Auditory","Visual"),
labels = c("Auditory stimuli",'Visual stimuli'))
dc$modalityConditionPart = as.character(factor(dc$modalityCondition,levels=c("multi","visual",'vocal'),labels=c("Multimodal",'Gestural','Vocal')))
dc$modalityConditionPart[dc$measure=="directorTurnLength"] = paste(dc$modalityConditionPart[dc$measure=="directorTurnLength"],"(turn length)")
dc$modalityConditionPart[dc$measure=="decisionTime"] = paste(dc$modalityConditionPart[dc$measure=="decisionTime"],"(trial length)")
# TODO
dx$comprehensionTime = dx$trialLength - dx$turnLength
dx$turnLength.norm = scale(log(dx$turnLength))
dx$comprehensionTime.norm = scale(log(dx$comprehensionTime))
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
summary(m.turnLength)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model(m.turnLength)
m.compTime.stat = get_model(m.compTime)
library(sjPlot)
m.turnLength.stat = get_model(m.turnLength)
?get_model_data
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_get_model_data(m.compTime)
m.compTime.stat = get_model_data(m.compTime)
head(m.turnLength.stat)
?facet_grid
m.turnLength.stat$term
?geom_errorbar
names(m.turnLength.stat)
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
geom_errorbar(aes(ymin=conf.low,ymax=conf.high)) +
facet_grid(.~indep)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
geom_errorbar(aes(ymin=conf.low,ymax=conf.high)) +
facet_grid(.~indep)
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
geom_errorbar(aes(xmin=conf.low,xmax=conf.high)) +
facet_grid(.~indep)
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
coord_flip() +
geom_errorbar(aes(ymin=conf.low,ymax=conf.high)) +
facet_grid(.~indep)
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
geom_errorbar(aes(ymin=conf.low,ymax=conf.high)) +
facet_grid(.~indep)
ggplot(rbind(m.turnLength.stat,m.compTime.stat),
aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high)) +
facet_grid(.~indep)
?geom_errorbar
plot_model(m.turnLength)
x = plot_model(m.turnLength)
x$layers
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),size=0.1) +
facet_grid(.~indep)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),size=0.1) +
facet_grid(.~indep)
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),length=0.1) +
facet_grid(.~indep)
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),width=0.1) +
facet_grid(.~indep)
?geom_errorbarh
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0.1) +
facet_grid(.~indep)
ggplot(sx, aes(x=estimate,y=term)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep)
sx$sig = sx$p.value < 0.05
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep)
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none')
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',panel.grid.major.x = element_blank())
?geom_hline
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0) +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank())
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("black","gray"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
sx$term
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition*turnModalityType +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition*turnModalityType +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
I(trialTotal^2) +
modalityCondition*condition*turnModalityType*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
I(trialTotal^2) +
modalityCondition*condition*turnModalityType*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
I(trialTotal^2) +
modalityCondition*condition*turnModalityType*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx[dx$game==3,], REML = FALSE,control = ctrl)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
I(trialTotal^2) +
modalityCondition*condition*turnModalityType*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx[dx$game==3,], REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition*condition*turnModalityType*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
summary(m.turnLength)
table(dx$turnModalityType)
dx$turnModalityType.multi = dx$turnModalityType=="multi"
dx$turnModalityType.multi = dx$turnModalityType=="multi"
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition*condition*turnModalityType.multi*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
summary(m.turnLength)
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
I(trialTotal^2) +
modalityCondition*condition*turnModalityType.multi*trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
m.turnLength = lmer(turnLength.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:turnModalityType.multi:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
m.compTime = lmer(comprehensionTime.norm ~ 1 +
matcherResponds +
incorrect +
modalityCondition:trialTotal +
trialTotal + I(trialTotal^2) +
modalityCondition*condition +
modalityCondition:I(trialTotal^2) +
modalityCondition:condition:turnModalityType.multi:trialTotal +
(1 + condition |dyadNumber/playerId) +
(1 + modalityCondition|itemId),
data=dx, REML = FALSE,control = ctrl)
m.turnLength.stat = get_model_data(m.turnLength)
m.compTime.stat = get_model_data(m.compTime)
m.turnLength.stat$indep = "Director turn length"
m.compTime.stat$indep = "Comprehension time"
sx = rbind(rbind(m.turnLength.stat,m.compTime.stat))
sx$sig = sx$p.value < 0.05
sx$indep = factor(sx$indep,levels = c("Director turn length","Comprehension time"))
ggplot(sx, aes(x=estimate,y=term,colour=sig)) +
geom_vline(xintercept=0, col='white') +
geom_point() +
geom_errorbarh(aes(xmin=conf.low,xmax=conf.high),height=0) +
facet_grid(.~indep) +
theme(legend.position = 'none',
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()) +
scale_colour_manual(values=c("gray","black"))
mind(dx$comprehensionTime)
min(dx$comprehensionTime)
hist(dx$comprehensionTime)
hist(dx$trialLength)
hist(dx$turnLength)
sum((dx$trialLength<dx$turnLength))
dx[dx$trialLength<dx$turnLength,]
all(dx$turnLength==dx$T1Length)
dx[dx$trialLength<dx$turnLength,c("trialLength","turnLength")]
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==0,]$comprehensionTime~ dxx[dxx$game==1,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Visual",]
comp.t1 = t.test(dxx[dxx$game==0,]$comprehensionTime~ dxx[dxx$game==0,]$modalityCondition)
comp.t1$p.value = p.adjust(comp.t1$p.value,n=5)
comp.t1
comp.t1b = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t1b$p.value = p.adjust(comp.t1b$p.value,n=5)
comp.t1b
dxx = dx[dx$turnModalityType=="unimodal acoustic" & dx$condition=="Auditory",]
comp.t2 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t2$p.value = p.adjust(comp.t2$p.value,n=5)
comp.t2
tlen.t2 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
tlen.t2$p.value = p.adjust(tlen.t2$p.value,n=4)
tlen.t2
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
dxx = dx[dx$turnModalityType=="unimodal visual" & dx$condition=="Auditory",]
comp.t3 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition)
comp.t3$p.value = p.adjust(comp.t3$p.value,n=5)
comp.t3
tlen.t3 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition)
tlen.t3$p.value = p.adjust(tlen.t3$p.value,n=4)
tlen.t3
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
comp.t4$p.value = p.adjust(comp.t4$p.value,n=5)
comp.t4
dxx = dx[dx$condition=="Visual",]
tlen.t4 = t.test(dxx[dxx$game==3,]$turnLength~ dxx[dxx$game==3,]$modalityCondition=="multi")
tlen.t4$p.value = p.adjust(tlen.t4$p.value,n=4)
tlen.t4
comp.t4$p.value = p.adjust(comp.t4$p.value,n=4)
dxx = dx[dx$condition=="Auditory",]
comp.t4 = t.test(dxx[dxx$game==3,]$comprehensionTime~ dxx[dxx$game==3,]$modalityCondition=="multi")
comp.t4$p.value = p.adjust(comp.t4$p.value,n=4)
comp.t4
