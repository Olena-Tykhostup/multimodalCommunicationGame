trialTotalQ:modalityCondition +
trialTotalQ:condition +
trialTotalQ:multi +
cumNumT2*modalityCondition +
cumNumT2:condition +
cumNumT2:trialTotal +
cumNumTurns*modalityCondition +
cumNumTurns:condition +
cumNumTurns:trialTotal +
(1 | dyadNumber / playerId) +
(1 + modalityCondition|itemId),
data = d)
convertEst = function(X){
exp(meanLogTurnLength+X) - exp(meanLogTurnLength)
}
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
x
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
hist(d$cumNumTurns)
library(lme4)
library(party)
library(sjPlot)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/Final_Turn_data.csv")
x = table(d$dyadNumber,d$itemId)
x[,] = 0
d = d[order(d$dyadNumber,d$game,d$trial),]
d$cumNumT2 = 0
for(i in 1:nrow(d)){
if(d[i,]$turnType=="T2"){
x[d[i,]$dyadNumber, d[i,]$itemId] =
x[d[i,]$dyadNumber, d[i,]$itemId] + 1
}
d[i,]$cumNumT2 = x[d[i,]$dyadNumber, d[i,]$itemId]
}
x = table(d$dyadNumber,d$itemId)
x[,] = 0
d$cumNumTurns = 0
for(i in 1:nrow(d)){
d[i,]$cumNumTurns = x[d[i,]$dyadNumber, d[i,]$itemId]
x[d[i,]$dyadNumber, d[i,]$itemId] =
x[d[i,]$dyadNumber, d[i,]$itemId] + 1
}
d = d[d$turnType=="T1",]
d = d[!duplicated(d$trialString),]
d$turnLength.logcenter = log(d$turnLength)
meanLogTurnLength = mean(d$turnLength.logcenter)
d$turnLength.logcenter  = d$turnLength.logcenter - meanLogTurnLength
d$multi = d$turnModalityType=="multi"
d$trialTotal = d$trial + (d$game * (max(d$trial)+1))
# Convert to proportion of games played, so that estimates reflect change per game.
d$trialTotal = d$trialTotal / 16
# Center the trialTotal variable so intercept reflects after the first game
d$trialTotal = d$trialTotal - 2
# Quadratic effect
d$trialTotalQ = d$trialTotal^2
cx = ctree(turnLength.logcenter~
trialTotal + trialTotalQ +
modalityCondition+condition +
multi + cumNumT2 + cumNumTurns,
data = d)
plot(cx, terminal_panel=node_barplot)
m0 = lmer(turnLength.logcenter~
trialTotal + trialTotalQ +
modalityCondition*condition*multi +
trialTotal:modalityCondition +
trialTotal:condition +
trialTotal:multi +
trialTotalQ:modalityCondition +
trialTotalQ:condition +
trialTotalQ:multi +
cumNumT2*modalityCondition +
cumNumT2:condition +
cumNumT2:trialTotal +
cumNumTurns*modalityCondition +
cumNumTurns:condition +
cumNumTurns:trialTotal +
(1 | dyadNumber / playerId) +
(1 + modalityCondition|itemId),
data = d)
convertEst = function(X){
exp(meanLogTurnLength+X) - exp(meanLogTurnLength)
}
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
x
m0 = lmer(turnLength.logcenter~
trialTotal + trialTotalQ +
modalityCondition*condition*multi +
trialTotal:modalityCondition +
trialTotal:condition +
trialTotal:multi +
trialTotalQ:modalityCondition +
trialTotalQ:condition +
trialTotalQ:multi +
cumNumT2*modalityCondition +
cumNumT2:condition +
cumNumT2:trialTotal +
cumNumTurns*modalityCondition*condition +
cumNumTurns:trialTotal +
(1 | dyadNumber / playerId) +
(1 + modalityCondition|itemId),
data = d)
convertEst = function(X){
exp(meanLogTurnLength+X) - exp(meanLogTurnLength)
}
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
x
m0 = lmer(turnLength.logcenter~
trialTotal + trialTotalQ +
modalityCondition*condition*multi +
trialTotal:modalityCondition +
trialTotal:condition +
trialTotal:multi +
trialTotalQ:modalityCondition +
trialTotalQ:condition +
trialTotalQ:multi +
#cumNumT2*modalityCondition +
#cumNumT2:condition +
#cumNumT2:trialTotal +
cumNumTurns*modalityCondition*condition +
cumNumTurns:trialTotal +
(1 | dyadNumber / playerId) +
(1 + modalityCondition|itemId),
data = d)
convertEst = function(X){
exp(meanLogTurnLength+X) - exp(meanLogTurnLength)
}
x = sjp.lmer(m0, 'fe', fade.ns = T,
geom.colors = c(1,1),
prnt.plot = F,
xlab= "Turn length (ms)",
p.kr = FALSE,
show.values = F,
show.p = F)
x$plot.list[[1]]$data$estimate =convertEst(x$plot.list[[1]]$data$estimate)
x$plot.list[[1]]$data$conf.low = convertEst(x$plot.list[[1]]$data$conf.low)
x$plot.list[[1]]$data$conf.high =  convertEst(x$plot.list[[1]]$data$conf.high)
x
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="T1 length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="T1 length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Visual"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="T1 length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Visual"){
legend(1.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="T1 length (s)", las=1)
plotmeans(turnLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Visual"){
legend(1.5,20,legend=c('Multimodal','Visual','Acoustic'), col=3:1,lty=1,pch=1)
}
title(main=stimType)
}
0.0012503/13
0.0012503*13
p.adjust(0.00125,n=13)
dim(d)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
d$game = d$game +1
tapply(d[d$modalityCondition=='multi',]$turnType, d[d$modalityCondition=='multi',]$trialString, function(X){"T2" %in% X})
sum(tapply(d[d$modalityCondition=='multi',]$turnType, d[d$modalityCondition=='multi',]$trialString, function(X){"T2" %in% X}))
sum(tapply(d[d$modalityCondition=='multi',]$turnType, d[d$modalityCondition=='multi',]$trialString, function(X){"T2" %in% X}),na.rm=T)
d = read.csv("../../data/FinalSignalData.csv")
d= d[!duplicated(d$trialString),]
d = read.csv("../../data/Final_Turn_data.csv")
head(d)
table(d$turnType,d$turnModalityType)
d = d[d$turnModalityType!="unimodal mixed",]
table(d$turnType,d$turnModalityType)
d = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors=F)
d = d[d$turnModalityType!="unimodal mixed",]
table(d$turnType,d$turnModalityType)
library(gplots)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/")
d = read.csv("../../data/FinalSignalData.csv")
d$game = d$game +1
#d = d[d$correct,]
plotmeans(trialLength~paste(modalityCondition,condition),
data=d[!duplicated(d$trialString),],
connect=list(1:2,3:4,5:6))
pdf("../../results/graphs/Efficiency.pdf", width=10, height=6)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,20),
xlab="Game",
ylab="Trial length (s)", las=1)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(trialLength/1000~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,20,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
dev.off()
############
# Accuracy
pdf("../../results/graphs/Accuracy.pdf", width=10, height=6)
par(mfrow=c(1,2))
for(stimType in unique(d$condition)){
plotmeans(correct~game,
data = d[d$modalityCondition=='vocal' & !duplicated(d$trialString)
& d$condition==stimType,],
col=1,barcol = 1,n.label = F,
ylim=c(0,1),
xlab="Game",
ylab="Accuracy", las=1)
plotmeans(correct~game,
data = d[d$modalityCondition=='multi' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=2,barcol = 2,
xaxt='n',
n.label = F)
plotmeans(correct~game,
data = d[d$modalityCondition=='visual' & !duplicated(d$trialString)
& d$condition==stimType,],
add=T,col=3,barcol = 3,n.label = F,
xaxt='n')
if(stimType=="Auditory"){
legend(2.5,0.5,legend=c('Acoustic','Multimodal','Visual'), col=1:3,lty=1,pch=1)
}
title(main=stimType)
}
dev.off()
###########
#
d2 = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors = F)
pdf("../../results/graphs/Efficiency_MultimodalCondition.pdf", width=10, height=6)
par(mfrow=c(1,2))
for(stimType in unique(d2$condition)){
dx = d2[d2$modalityCondition=='multi'
& d2$condition==stimType
& d2$turnType=="T1",]
dx = dx[!duplicated(dx$trialString), ]
plotmeans(trialLength/1000~game,
data = dx[dx$turnModalityType=="multi",],
col=2,barcol = 1,n.label = F,
lty=1,
ylim=c(0,20),
xlab="Game",
ylab="Trial length (s)", las=1)
if(sum(dx$turnModalityType=="unimodal acoustic")>0){
plotmeans(trialLength/1000~game,
data = dx[dx$turnModalityType=="unimodal acoustic",],
col=2,barcol = 1,n.label = F,
lty=2,
pch=2,
add = T,
ylim=c(0,20),
xlab="",
ylab="", las=1)
}
if(sum(dx$turnModalityType=="unimodal visual")>0){
plotmeans(trialLength/1000~game,
data = dx[dx$turnModalityType=="unimodal visual",],
col=2,barcol = 1,n.label = F,
lty=3,
pch=4,
add = T,
ylim=c(0,20),
xlab="",
ylab="", las=1)
}
title(main=paste(stimType,"stimuli"))
}
legend(2,20, legend=c("Multi","Acoustic","Visual"), col=2, lty=1:3,pch=c(1,2,4))
dev.off()
d = d[d$modalityCondition=='multi',]
d = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors=F)
d = d[d$modalityCondition=='multi',]
d = d[d$turnModalityType!="unimodal mixed",]
table(d$turnType,d$turnModalityType)
table(d$turnType,d$turnModalityType, d$condition)
---
title: "Analysis of multimodal condition"
output: pdf_document
knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_file = file.path(dirname(inputFile), "../../results/MainResults_MultimodalTurns.pdf")) })
---
This script uses data compiled by *analyseData.R*.
## Load libraries
```{r warning=FALSE, message=FALSE}
library(party)
```
```{r echo=F}
try(setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/"))
```
## Load data
```{r}
d = read.csv("../../data/Final_Turn_data.csv", stringsAsFactors = F)
d = d[d$modalityCondition == "multi",]
```
## Prepare variables
```{r}
# Relabel modalities
d[d$turnModalityType=="multi",]$turnModalityType = "M"
d[d$turnModalityType=="unimodal acoustic",]$turnModalityType = "A"
d[d$turnModalityType=="unimodal visual",]$turnModalityType = "V"
# Only need one record per trial
d2 = d[!duplicated(d$trialString),]
# get turn modality type for T1
x = tapply(d[d$turnType=="T1",]$turnModalityType, d[d$turnType=="T1",]$trialString,head,n=1)
d2$turnModality.T1 = x[d2$trialString]
# remove NAs
d2 = d2[!is.na(d2$turnModality.T1),]
# relevel
d2$turnModality.T1 = relevel(factor(as.character(d2$turnModality.T1)),"V")
# get turn modality type for T2
x = tapply(d[d$turnType=="T2",]$turnModalityType, d[d$turnType=="T2",]$trialString,head,n=1)
d2$turnModality.T2 = x[d2$trialString]
d2$turnModality.T2[is.na(d2$turnModality.T2)] = "n"
d2$turnModality.T2 = relevel(factor(d2$turnModality.T2),'n')
# get turn modality type for T3
x = tapply(d[d$turnType=="T3",]$turnModalityType, d[d$turnType=="T3",]$trialString,head,n=1)
d2$turnModality.T3 = x[d2$trialString]
d2$turnModality.T3[is.na(d2$turnModality.T3)] = "n"
d2$turnModality.T3 = relevel(factor(d2$turnModality.T3),'n')
```
Make game variable.
```{r}
d2$trialTotal = d2$trial + (d2$game * (max(d2$trial)+1))
# Convert to proportion of games played, so that estimates reflect change per game.
d2$trialTotal = d2$trialTotal / 16
# Center the trialTotal variable so intercept reflects after the first game
d2$trialTotal = d2$trialTotal - 1
d2$incorrect = !d2$correct
```
Scale trial length variable.
```{r}
d2$trialLength.logcenter = log(d2$trialLength)
d2$trialLength.logcenter = d2$trialLength.logcenter - mean(d2$trialLength.logcenter)
```
# Binary trees
table(d2$turnModality.T2, d2$turnModality.T3)
table(d2$turnModality.T2, d2$turnModality.T3==1)
table(d2$turnModality.T1, d2$turnModality.T3)
