groupvars=c("TryMarked.cat","Teach"))
dodge <- position_dodge(width=0.5)
main.plot <- ggplot(sumStats2,
aes(x = TryMarked.cat, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Try Marked Frequency") +
ylab("Frequency in week 3") +
coord_cartesian(ylim=c(0,0.6)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot
main.plot <- ggplot(sumStats2,
aes(x = TryMarked.cat, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Try Marked Frequency") +
ylab("Frequency in week 3") +
coord_cartesian(ylim=c(0,10)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot
main.plot <- ggplot(sumStats2,
aes(x = TryMarked.cat, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Try Marked Frequency") +
ylab("Frequency in week 3") +
coord_cartesian(ylim=c(0,6)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot
mean(variants[variants$Teach & variants$TryMarked.cat=='high',]$freq_week_4)
mean(variants[variants$Teach & variants$TryMarked.cat=='high',]$freq_week_4, na.rm=T)
table(variants$TryMarked.cat)
mean(variants[variants$Teach & variants$TryMarked.cat=='High',]$freq_week_4, na.rm=T)
mean(variants[!variants$Teach & variants$TryMarked.cat=='High',]$freq_week_4, na.rm=T)
mean(variants[variants$Teach & variants$TryMarked.cat=='Low',]$freq_week_4, na.rm=T)
mean(variants[!variants$Teach & variants$TryMarked.cat=='Low',]$freq_week_4, na.rm=T)
sumStats2 = summarySE(variants, measurevar="freq_week_4",
groupvars=c("Teach","check.any"))
dodge <- position_dodge(width=0.5)
main.plot2 <- ggplot(sumStats2,
aes(x = check.any, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Check") +
ylab("Proportional frequency in week 3") +
coord_cartesian(ylim=c(0,6)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot2
sumStats2 = summarySE(variants, measurevar="freq_week_4",
groupvars=c("Teach","check.any"))
dodge <- position_dodge(width=0.5)
main.plot2 <- ggplot(sumStats2,
aes(x = check.any, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Check") +
ylab("Proportional frequency in week 3") +
coord_cartesian(ylim=c(0,3)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot2
sumStats2 = summarySE(variants, measurevar="freq_week_4",
groupvars=c("Teach","check.any"))
dodge <- position_dodge(width=-0.5)
main.plot2 <- ggplot(sumStats2,
aes(x = check.any, y = freq_week_4, colour=Teach)) +
geom_point(position=dodge, size=4) + geom_line(aes(group=Teach),position=dodge) +
geom_errorbar(aes(ymax=freq_week_4+se, ymin=freq_week_4-se), width=0.25,position=dodge) +
xlab("Check") +
ylab("Proportional frequency in week 3") +
coord_cartesian(ylim=c(0,3)) +
scale_color_discrete(breaks=c(FALSE,TRUE),
labels=c("No","Yes"),
name="Teach") +
theme(text=element_text(size=18))
main.plot2
m9 = glmer(freq_week_4 ~
1 +
indexical +
Teach +
TryMarked +
check.any +
freq_week_1_total +
averageLength_week_1.logcenter +
inventedBy +
Teach : TryMarked +
Teach : check.any +
(1 | colourName) ,
data=variants, family=poisson)
m9b = glmer(freq_week_4 ~
1 +
indexical +
Teach +
TryMarked +
check.any +
freq_week_1_total +
averageLength_week_1.logcenter +
inventedBy +
Teach : TryMarked +
Teach : check.any +
(1 | colourName) ,
data=variants, family=poisson)
---
title: "Colour experiment"
output:
pdf_document:
toc: true
---
\newpage
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
## Data
-  colour: Code of the target colour
-  colourName: English name of the target colour
-  sign: label for the variant produced
-  freq_week_1_total: Total number of occurances of the variant in the first week, across all colour contexts.
-  freq_week_4_total: Total number of occurances of the variant in the final week, across all colour contexts.
-  freq_week_1: Number of occurances of the variant used during the given target colour context in week 1.
-  freq_week_4: Number of occurances of the variant used during the given target colour context in the final week.
-  prop_week_1: Same as freq_week_1, but as a proportion of all variants used in the given colour context.
-  prop_week_4: Same as freq_week_4, but as a proportion of all variants used in the given colour context.
-  origin:  The origin language of the sign.  For many, identifying an origin is not possible, so is labelled "None"
-  iconic: Old variable
-  check: The number of times this variable was used in a checking turn.
-  indexical:  Is the variant non-indexical, indexical or indexical of the body?
-  inventedBy:  The name of the first signer to use this variant in the experiment.
-  TryMarked:  The number of times this sign was used in try-marking.
-  Teach:  The number of times this sign was explicitly taught.
-  averageLength_week_1:  Average time to produce the variant in milliseconds
-  averageTrialLength_week_1:  Average time for completing the trial for the given target colour.
-  BodyAnchor:  Is the variant body-anchored (redundant with 'indexical')
\newpage
## Poisson regression
This study uses a mixed effects regression model with poisson distributions.  Most standard regression analyses assume that the values they are trying to model come from a normal distribution, like this:
```{r echo=F}
set.seed(237)
hist(rnorm(1000, mean = 8, sd = 2), main='', xlab='Frequency', ylab='Count')
```
However, the main variable for this study is the frequency of sign variants, with a strong skew and many zero values:
```{r echo=F}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
hist(variants$freq_week_4, main='', xlab='Frequency', ylab='Count')
```
Instead of using a normal distribution as the basis for the statistical model or transforming the data (which is difficult anyway because of the large number of zero counts), we can use a poisson distribution.  This also has the advantage of only predicting whole, non-negative numbers, which makes sense for this data because a variant can't be used half a time or a negative number of times.
# Load libraries
```{r warning=F, message=F}
library(ggplot2)
library(lme4)
library(party)
library(Rmisc)
library(dplyr)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL, showWald=F){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
There is only 1 variant for `white'.  Therefore, we remove it from this statistical analysis.
```{r}
variants = variants[variants$colourName!='white',]
```
Transform some variables.
```{r}
# The range of values for 'Teach' is very small:
table(variants$Teach)
# So we'll turn it into a binary category:
#  variants that were never taught and variants that were
variants$Teach = variants$Teach >0
# Similar for checking
variants$check.any = variants$check>0
# Transform total frequency
variants$freq_week_1_total.logcenter =
log(variants$freq_week_1_total + 1)
variants$freq_week_1_total.logcenter =
variants$freq_week_1_total.logcenter - mean(variants$freq_week_1_total.logcenter)
# cut TryMarking into two categories
variants$TryMarked.cat = cut(variants$TryMarked,
c(-Inf,3,Inf),
labels = c("Low",'High'))
# transform length
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
variants$averageLength_week_1.logcenter -
mean(variants$averageLength_week_1.logcenter)
variants$sign
length(unique(variants$sign))
names(variants)
x = variants[,c("colourName","sign")]
head(x)
listofsigns = variants[,c("colourName","sign")]
write.csv(listofsigns,"../results/descriptive/ListOfVariants.csv", fileEncoding = 'utf-8')
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/")
library(openxlsx)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/")
read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls")
library(xlsx)
read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls")
read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls",1)
d = read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls",1)
words = c("rock","fruit","predator","water","tree","hole")
d[d$Noun %in% words,]
d2  = read.xlsx("../data/13428_2010_38_MOESM1_ESM.xls",1)
grepl("1",names(d2))
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
dim(d2a)
dim(d2b)
d2  = read.xlsx("../data/13428_2010_38_MOESM1_ESM.xls",1)
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
names(d2b) = names(d2a)
d2 = rbind(d2a,d2b)
d2[d2$Concept1 %in% words,]
dx = d[d$Noun %in% words,]
dx
d2[d2$Concept1 %in% words,]
names(dx)
dx[,c("Noun",'Visual_mean','Auditory_mean')]
words = c("rock","fruit","predator","water","tree","hole",'apple','banana')
d2[d2$Concept1 %in% words,]
d2 = d2[!duplicated(d2$Concept1),c("Concept1","MeanVis1", "MeanAud1","")]
d2 = d2[!duplicated(d2$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
d2
d2 = d2[d2$Concept1 %in% words,]
d2 = d2[!duplicated(d2$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
d2
max(d$Auditory_mean)
min(d$Auditory_mean)
library(xlsx)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/")
d = read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls",1)
d2  = read.xlsx("../data/13428_2010_38_MOESM1_ESM.xls",1)
words = c("rock","fruit","predator","water","tree","hole",'apple','banana','bear','emotion','anger')
dx = d[d$Noun %in% words,]
dx[,c("Noun",'Visual_mean','Auditory_mean')]
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
names(d2b) = names(d2a)
d2 = rbind(d2a,d2b)
d3 = d2[d2$Concept1 %in% words,]
d3 = d3[!duplicated(d3$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
names(d2) = c("Noun","Visual_mean","Auditory_mean")
d[which(d$Auditory_mean==max(d$Auditory_mean)),]
d[d$Auditory_mean>4.5,]
words = c("rock","fruit","predator","water","tree","hole",'apple','banana','bear','emotion','anger')
dx = d[d$Noun %in% words,]
dx[,c("Noun",'Visual_mean','Auditory_mean')]
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
names(d2b) = names(d2a)
d2 = rbind(d2a,d2b)
d3 = d2[d2$Concept1 %in% words,]
d3 = d3[!duplicated(d3$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
names(d2) = c("Noun","Visual_mean","Auditory_mean")
names(d3) = c("Noun","Visual_mean","Auditory_mean")
d3
library(xlsx)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/")
d = read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls",1)
d2  = read.xlsx("../data/13428_2010_38_MOESM1_ESM.xls",1)
words = c("rock","fruit","predator","water","tree","hole",'apple','banana','bear','emotion','anger')
dx = d[d$Noun %in% words,]
dx[,c("Noun",'Visual_mean','Auditory_mean')]
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
names(d2b) = names(d2a)
d2 = rbind(d2a,d2b)
d3 = d2[d2$Concept1 %in% words,]
d3 = d3[!duplicated(d3$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
names(d3) = c("Noun","Visual_mean","Auditory_mean")
d3
rbind(dx,d3)
dx
dx = dx[,c("Noun",'Visual_mean','Auditory_mean')]
rbind(dx,d3)
write.csv(rbind(dx,d3),"../results/tables/ModalityNormComparison.csv")
---
title: "Modality effects in a signalling game"
output: pdf_document
knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_file = file.path(dirname(inputFile), "../../results/MainResults_Efficiency.pdf")) })
---
# Intro
This script uses data compiled by *analyseData.R*.
## Load libraries
```{r warning=FALSE, message=FALSE}
library(lme4)
library(sjPlot)
library(ggplot2)
library(lattice)
library(influence.ME)
```
```{r echo=F}
try(setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/R/"))
```
## Load data
```{r}
d = read.csv("../../data/FinalSignalData.csv")
```
Work out number of turns in each trial.
```{r}
# Number of turns in each trial
numTurns = tapply(d$turnString, d$trialString,
function(X){length(unique(X))})
d$numberOfTurns = numTurns[d$trialString]
```
Variable for length of first T1
```{r}
T1L = tapply(d[d$turnType=="T1",]$turnLength,
d[d$turnType=="T1",]$trialString, head, n=1)
d$T1Length = T1L[d$trialString]
d$T1Length[is.na(d$T1Length)] = mean(d$T1Length,na.rm=T)
d$T1Length.log = log(d$T1Length)
d$T1Length.log = d$T1Length.log - mean(d$T1Length.log)
```
We don't need info on every signal in each turn, just the trial time.  Keep only 1st signal in each trial.
```{r}
d = d[!duplicated(d$trialString),]
d$trial
d$trialString
dim(d)
---
title: "Colour experiment"
output:
pdf_document:
toc: true
---
\newpage
# Introduction
This analysis looks at the sign variants used in a colour naming game between signers of different sign languages meeting after 1 week of interaction and after 3 weeks of interaction.  The data was collected by Kang Suk Byun (Kang-Suk.Byun@mpi.nl).
The analysis tries to predict the relative frequency of each variant within a colour category in week 3, based on measures from week 1.
## Data
-  colour: Code of the target colour
-  colourName: English name of the target colour
-  sign: label for the variant produced
-  freq_week_1_total: Total number of occurances of the variant in the first week, across all colour contexts.
-  freq_week_4_total: Total number of occurances of the variant in the final week, across all colour contexts.
-  freq_week_1: Number of occurances of the variant used during the given target colour context in week 1.
-  freq_week_4: Number of occurances of the variant used during the given target colour context in the final week.
-  prop_week_1: Same as freq_week_1, but as a proportion of all variants used in the given colour context.
-  prop_week_4: Same as freq_week_4, but as a proportion of all variants used in the given colour context.
-  origin:  The origin language of the sign.  For many, identifying an origin is not possible, so is labelled "None"
-  iconic: Old variable
-  check: The number of times this variable was used in a checking turn.
-  indexical:  Is the variant non-indexical, indexical or indexical of the body?
-  inventedBy:  The name of the first signer to use this variant in the experiment.
-  TryMarked:  The number of times this sign was used in try-marking.
-  Teach:  The number of times this sign was explicitly taught.
-  averageLength_week_1:  Average time to produce the variant in milliseconds
-  averageTrialLength_week_1:  Average time for completing the trial for the given target colour.
-  BodyAnchor:  Is the variant body-anchored (redundant with 'indexical')
\newpage
## Poisson regression
This study uses a mixed effects regression model with poisson distributions.  Most standard regression analyses assume that the values they are trying to model come from a normal distribution, like this:
```{r echo=F}
set.seed(237)
hist(rnorm(1000, mean = 8, sd = 2), main='', xlab='Frequency', ylab='Count')
```
However, the main variable for this study is the frequency of sign variants, with a strong skew and many zero values:
```{r echo=F}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
hist(variants$freq_week_4, main='', xlab='Frequency', ylab='Count')
```
Instead of using a normal distribution as the basis for the statistical model or transforming the data (which is difficult anyway because of the large number of zero counts), we can use a poisson distribution.  This also has the advantage of only predicting whole, non-negative numbers, which makes sense for this data because a variant can't be used half a time or a negative number of times.
# Load libraries
```{r warning=F, message=F}
library(ggplot2)
library(lme4)
library(party)
library(Rmisc)
library(dplyr)
```
```{r echo=F}
setwd("~/Documents/MPI/KangSukColours/ColourExperiment/analysis/")
getMEText = function(r,ef, wald=NULL, showWald=F){
AIC = r[2,]$AIC
loglikDiff = signif(diff(r$logLik),2)
chi = round(r$Chisq[2],2)
df = r$`Chi Df`[2]
p = signif(r$`Pr(>Chisq)`[2],2)
wald.text = ""
if(!is.null(wald)){
est = signif(wald[1],2)
stder = signif(wald[2],2)
t = signif(wald[3],2)
wptext = ""
wald.text =  paste("beta = ",est,",")
if(showWald){
if(!is.na(wald[4])){
wptext = paste(", Wald p =",signif(wald[4],2))
}
wald.text = paste("beta = ",est,", std.err = ",stder, ", Wald t = ",t,wptext,';')
}
}
begin = 'There was no significant'
if(p <0.09){
begin = "There was a marginal"
}
if(p < 0.05){
begin = 'There was a significant'
}
return(paste(begin,ef,"(",wald.text,"log likelihood difference =",
loglikDiff,", df = ",df,", Chi Squared =", chi,", p = ",p,")."))
}
```
# Load data
```{r}
variants = read.csv('../data/processedData/variants_summary.csv', stringsAsFactors = F)
```
There is only 1 variant for `white'.  Therefore, we remove it from this statistical analysis.
```{r}
variants = variants[variants$colourName!='white',]
```
Transform some variables.
```{r}
# The range of values for 'Teach' is very small:
table(variants$Teach)
# So we'll turn it into a binary category:
#  variants that were never taught and variants that were
variants$Teach = variants$Teach >0
# Similar for checking
variants$check.any = variants$check>0
# Transform total frequency
variants$freq_week_1_total.logcenter =
log(variants$freq_week_1_total + 1)
variants$freq_week_1_total.logcenter =
variants$freq_week_1_total.logcenter - mean(variants$freq_week_1_total.logcenter)
# cut TryMarking into two categories
variants$TryMarked.cat = cut(variants$TryMarked,
c(-Inf,3,Inf),
labels = c("Low",'High'))
# transform length
variants$averageLength_week_1.logcenter = log(variants$averageLength_week_1)
variants$averageLength_week_1.logcenter =
variants$averageLength_week_1.logcenter -
mean(variants$averageLength_week_1.logcenter)
variants$sign
library(xlsx)
setwd("~/Documents/MPI/ViniciusMultimodal/multimodalCommunicationGame/experiment/analysis/")
d = read.xlsx("../data/13428_2012_267_MOESM1_ESM.xls",1)
d2  = read.xlsx("../data/13428_2010_38_MOESM1_ESM.xls",1)
words = c("rock","fruit","predator","water","tree","hole",'apple','banana','bear','emotion','anger')
dx = d[d$Noun %in% words,]
dx = dx[,c("Noun",'Visual_mean','Auditory_mean')]
d2a = d2[,grepl("1",names(d2))]
d2b = d2[,grepl("2",names(d2))]
names(d2b) = names(d2a)
d2 = rbind(d2a,d2b)
d3 = d2[d2$Concept1 %in% words,]
d3 = d3[!duplicated(d3$Concept1),c("Concept1","MeanVis1", "MeanAud1")]
names(d3) = c("Noun","Visual_mean","Auditory_mean")
write.csv(rbind(dx,d3),"../results/tables/ModalityNormComparison.csv")
dx
d3
d3[d3$Noun=='tree',]$Visual_mean
sum(d3[d3$Noun=='tree',]$Visual_mean > d3$Visual_mean)
sum(d3[d3$Noun=='tree',]$Visual_mean <= d2$Visual_mean) / nrow(d2)
head(d2)
which(d2[d2$MeanVis1==max(d2$MeanVis1)])
d2[d2$MeanVis1==max(d2$MeanVis1),]
sum(d3[d3$Noun=='tree',]$Visual_mean <= d2$MeanVis1) / nrow(d2)
sum(d3[d3$Noun=='tree',]$Auditory_mean<= d2$MeanAud1) / nrow(d2)
sum(d3[d3$Noun=='tree',]$Auditory_mean>= d2$MeanAud1) / nrow(d2)
d3[d3$Noun=='tree',]$Auditory_mean
d2$MeanAud1
hist(d2$MeanAud1)
