quantile_f = function(X,q){
# Use empirical distribution curve
#quantile(X,q,na.rm=T, type=1)
# Nth element, rounding down (Hammarstrom)
sort(X)[(q*length(X))]
}
x = rnorm(1000)
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t1 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t2 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
t1==t2
sum(t1==t2)
sum(t1==t2,na.rm=T)
quantile_f(x,0.95)
quantile(x,0.95,type=1)
quantile_f(x,0.95) == quantile(x,0.95,type=1)
t1 = sapply(seq(0,1,by=0.01), function(X){quantile_f(x,X)})
t2 = sapply(seq(0,1,by=0.01), function(X){quantile(x,X,type=1)})
sum(t1==t2,na.rm=T)
t1==t2
quantile_f(x,0.94) == quantile(x,0.95,type=1)
quantile_f(x,0.94) == quantile(x,0.93,type=1)
quantile_f(x,0.94) == quantile(x,0.94,type=1)
t1[95]
t2[95]
t2[96]
t2[93]
t2[94]
t2[95]
sum(t1>t2)
sum(t1>t2,na.rm=T)
sum(t1<t2,na.rm=T)
d = read.csv("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt")
d = read.csv("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F)
head(d)
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t')
head(d)
d$V3
d$V3
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t')
strsplit(d$V3,",")
d = read.delim("/Library/WebServer/Documents/ILMTurk/private/fluteilm/results/testExperiment.txt",header=F,sep='\t',stringsAsFactors = F)
strsplit(d$V3,",")
as.numeric(strsplit(d$V3,","))
sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
head(d)
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
d$V1
plot(sig[1],lin[1])
sig = sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
plot(sig[1],lin[1])
sig[1]
plot(sig[[1]],lin[[1]])
plot(c(800,550),c(0,1000),col='white')
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[1]],lin[[1]])
}
sig = sapply(strsplit(d$V3,","),function(X){as.numeric(X)})
lin =  sapply(strsplit(d$V7,","),function(X){as.numeric(X)})
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[i]],lin[[i]])
}
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
points(sig[[i]],lin[[i]][1:length(sig[[1]])])
}
plot(c(800,550),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
sig
lin
max(lin)
x
y
points(x,y)
plot(c(0,2000),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
plot(c(0,2300),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
plot(c(0,2500),c(0,1000),col='white')
for(i in 1:length(sig)){
x = sig[[i]]
y = lin[[i]]
x = x[1:length(y)]
y = y[1:length(x)]
points(x,y)
}
hist(x)
hist(y)
d = read.csv("/Users/sgroberts/Documents/Conferences/Evolang11/GenderCheck/DecisionsTracker - Sheet1.csv",stringsAsFactors=F)
head(d)
table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
d[d$FirstAuthorGender=='',]
d = read.csv("/Users/sgroberts/Documents/Conferences/Evolang11/GenderCheck/DecisionsTracker - Sheet1.csv",stringsAsFactors=F)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x/sum(x)
x = table(d[d$Final.Decision=='ACCEPT',]$FirstAuthorGender)
x
x[1] = x[1]+3
x/sum(x)
table(d$FirstAuthorGender)
pool = table(d$FirstAuthorGender)
pool/sum(pool)
x[1]/pool[1]
x[2]/pool[2]
9:16/16
x  9:16/16
x  =9:16/16
names(x) = 9:16
x
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,4))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,4))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(3,2))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz,dx$physpos)
}
d = read.csv("/Library/WebServer/Documents/ILMTurk/offline/TestThereminResults.csv")
par(mfrow=c(2,3))
for(cx in unique(d$curvature)){
dx = d[d$curvature==cx,]
plot(dx$hz~dx$physpos)
}
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep=\t,stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/SignedUp.txt",sep='\t',stringsAsFactors=F)
auth = read.delim("~/Documents/Conferences/Evolang11/Admin/SignedUp/AllAuthors.txt", sep="\t",stringsAsFactors=F)
signedup
auth[! auth%in% signedup]
sum(auth%in% signedup)
sum(auth%in% signedup[,1])
sum(auth[,1]%in% signedup[,1])
sum(auth[,1] %in% signedup[,1])
auth[,1]
sum(auth[,2]%in% signedup[,1])
auth[! auth[,2]%in% signedup[,1]]
auth[! auth[,2]%in% signedup[,1],2]
x = rbind(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
signedup[,1]
auth[! auth[,2]%in% signedup[,1],2]
x = c(signedup[,1],auth[! auth[,2]%in% signedup[,1],2])
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt")
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F)
write.csv(data.frame(email=x),file="~/Documents/Conferences/Evolang11/Admin/SignedUp/EmailX.txt",row.names=F, quote=F)
setwd("~/Documents/MPI/ViniciusMultimodal/experiment/analysis/")
d = read.csv("../data/csv/")
d = read.csv("../data/csv/Cod - Ex5.csv", stringsAsFactors = )
d = read.csv("../data/csv/Cod - Ex5.csv", stringsAsFactors = F)
head(d)
?barplot()
setwd("~/Documents/MPI/ViniciusMultimodal/experiment/analysis/")
d = read.csv("../data/csv/Cod - Ex5.csv", stringsAsFactors = F)
barplot(tapply(d$signalLength, d$signalType, mean))
library(gplots)
plotmeans( signalLength ~ signalType, data = d)
t.test( d[d$signalType=="C",]$signalLength, d[d$signalType=="S",]$signalLength)
